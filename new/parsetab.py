
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftBINORleftBINXORleftBINANDleftDOUBLEEQNOTEQUALSTREQUALSTRNEQUALleftLTGTLTEGTEleftLSHIFTRSHIFTURSHIFTleftPLUSMINUSleftINTODIVIDEMODrightNOTBINNOTAND ANDEQ BCOMMENT BINAND BINNOT BINOR BINXOR BOOLEAN BREAK CASE COLON COMMA CONDOP CONSOLE CONTINUE DECR DELETE DIVEQ DIVIDE DO DOT DOUBLEEQ ELSE EQ EXPONENT FOR FUNCTION GETP GETPROP GT GTE ID IF INCR INTO INTOEQ LCOMMENT LEFTBRACE LEFTBRACKET LEFTPAREN LOG LSHIFT LSHIFTEQ LT LTE MINUS MINUSEQ MOD MODEQ NEW NOT NOTEQUAL NUMBER OR OREQ PLUS PLUSEQ REGEX RETURN RIGHTBRACE RIGHTBRACKET RIGHTPAREN RSHIFT RSHIFTEQ SEMICOLON SETP SETPROP STREQUAL STRING STRNEQUAL SWITCH THIS TYPEOF UNDEFINED URSHIFT URSHIFTEQ VAR WHILE WITH XOREQstart : block  \n\t\t\t | statementsblock : LEFTBRACE blockmarker statements RIGHTBRACEblockmarker : statements : statement statements \n\t\t\t\t  | statementstatement : assignment SEMICOLON\n\t\t\t\t | declaration SEMICOLON \n\t\t\t\t | reassignment SEMICOLON \n\t\t\t\t | BREAK SEMICOLON\n\t\t\t\t | CONTINUE SEMICOLON\n\t\t\t\t | funcstmt SEMICOLON\n\t\t\t\t | if\n\t\t\t\t | ifelse\n\t\t\t\t | whileloop\n \t\t\t\t | funcdecl\n \t\t\t\t | forloop\n \t\t\t\t | reassignmentarray SEMICOLONstatement : RETURN expression SEMICOLONstatement : CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLONprintList : expression COMMA printListprintList : expressiondeclaration : VAR declarationListdeclarationList : ID COMMA declarationListdeclarationList : IDassignment : VAR assignlistassignlist : ID EQ expression COMMA assignlistassignlist : ID EQ expressionassignlist : ID EQ arrayreassignment : ID EQ expression\n\t\t\t\t| ID PLUSEQ expression\n\t\t\t\t| ID MINUSEQ expression\n\t\t\t\t| ID INTOEQ expression\n\t\t\t\t| ID DIVEQ expressionreassignment : ID INCR\n\t\t\t\t\t| ID DECRreassignment\t: ID LSHIFTEQ expression\n\t\t\t\t\t| ID RSHIFTEQ expression\n\t\t\t\t\t| ID URSHIFTEQ expression\n\t\t\t\t\t| ID ANDEQ expression\n\t\t\t\t\t| ID OREQ expression\n\t\t\t\t\t| ID XOREQ expression\n\t\t\t\t\t| ID MODEQ expression\n\t\t\t\t\t| LEFTPAREN reassignment RIGHTPARENarray : LEFTBRACKET arrayList RIGHTBRACKETarrayList : array COMMA arrayListarrayList : arrayarrayList : expression COMMA arrayListarrayList : expressionexpression : expression PLUS expression\n\t\t\t\t  | expression MINUS expression\n\t\t\t\t  | expression INTO expression\n\t\t\t\t  | expression DIVIDE expression\n\t\t\t\t  | expression MOD expressionexpression : LEFTPAREN expression RIGHTPARENexpression : NOT expressionexpression : expression BINAND expression\n\t\t\t\t  | expression BINOR expression\n\t\t\t\t  | expression BINXOR expression\n\t\t\t\t  | BINNOT expressionexpression : expression LT expression\n\t\t\t\t  | expression GT expression\n\t\t\t\t  | expression DOUBLEEQ expression\n\t\t\t\t  | expression NOTEQUAL expression\n\t\t\t\t  | expression LTE expression\n\t\t\t\t  | expression GTE expressionexpression : expression STREQUAL expression\n\t\t\t\t  | expression STRNEQUAL expressionexpression : basicTypesexpression : IDexpression : TYPEOF expressionfuncstmt : ID EQ functioncallfuncstmt : functioncallfuncstmt : VAR ID EQ functioncallexpression : arrayCallreassignmentarray : arrayCall EQ expressionarrayCall : ID referencereference : LEFTBRACKET expression RIGHTBRACKET referencereference : LEFTBRACKET expression RIGHTBRACKETbasicTypes : NUMBERbasicTypes : BOOLEANbasicTypes : STRINGbasicTypes : UNDEFINEDfunctioncall : ID LEFTPAREN argList RIGHTPARENargList : expressionargList : expression COMMA argListargList : if : IF expression ifelseblock block ifblockendifblockend : ifelse : IF expression ifelseblock block ELSE elseblock block elseblockendifelseblock : elseblock : emptyelseblockend : emptywhileloop : WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockendwhileblockstart : emptyexprcheck : emptywhileblockend : emptyforloop : FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_markerscope_marker : forexpr_marker : forcheck_marker : increment_marker : endblock_marker : forblock : LEFTBRACE statements RIGHTBRACEinitialization : assignment\n\t\t\t\t\t  | reinitializationreinitialization : reassignment COMMA reinitialization\n\t\t\t\t\t  | reassignmentfor_expr : expressionincrement : reassignment SEMICOLON increment\n\t\t\t\t | reassignmentfuncarghead : funcargListfuncargList : ID COMMA funcargListfuncargList : IDfuncargList : funcdecl : FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfuncfuncscopedefnormal : endfunc : emptyfuncdecl\t: VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdeclfunblock : LEFTBRACE statements RIGHTBRACEfuncscopedef : endfuncdecl : empty : '
    
_lr_action_items = {'BINXOR':([31,32,33,34,36,37,38,41,49,59,80,98,99,100,102,110,111,112,113,114,115,116,117,118,120,121,122,123,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,159,161,162,176,179,182,202,],[-83,-80,-75,-82,-70,82,-81,-69,82,-77,82,82,-56,-60,82,82,82,82,82,82,82,82,82,82,82,82,-70,82,82,82,82,-55,-57,-59,-62,-53,-63,-52,-66,-68,-67,-61,-50,-65,82,-64,-51,-54,-70,82,-79,82,82,-78,82,]),'RETURN':([0,4,5,12,13,16,23,24,43,45,47,52,55,76,77,78,85,151,165,170,200,203,204,205,207,212,213,215,216,217,218,222,226,229,232,233,235,236,],[3,-13,-15,-14,3,-17,-4,-16,-9,-12,-18,-7,-8,3,-10,-11,-19,-89,-3,-88,-123,-123,-123,3,-20,-94,-97,-93,-90,-116,-118,-120,-122,-119,3,-103,-98,-104,]),'UNDEFINED':([3,14,35,39,40,42,46,60,61,64,65,66,67,68,69,70,71,72,73,74,75,79,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,107,109,153,157,164,167,186,187,194,195,197,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-100,31,31,31,31,31,]),'MODEQ':([22,54,],[60,60,]),'STRNEQUAL':([31,32,33,34,36,37,38,41,49,59,80,98,99,100,102,110,111,112,113,114,115,116,117,118,120,121,122,123,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,159,161,162,176,179,182,202,],[-83,-80,-75,-82,-70,89,-81,-69,89,-77,89,89,-56,-60,89,89,89,89,89,89,89,89,89,89,89,89,-70,89,89,89,89,-55,89,89,-62,-53,-63,-52,-66,-68,-67,-61,-50,-65,89,-64,-51,-54,-70,89,-79,89,89,-78,89,]),'NUMBER':([3,14,35,39,40,42,46,60,61,64,65,66,67,68,69,70,71,72,73,74,75,79,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,107,109,153,157,164,167,186,187,194,195,197,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-100,32,32,32,32,32,]),'WHILE':([0,4,5,12,13,16,23,24,43,45,47,52,55,76,77,78,85,151,165,170,200,203,204,205,207,212,213,215,216,217,218,222,226,229,232,233,235,236,],[2,-13,-15,-14,2,-17,-4,-16,-9,-12,-18,-7,-8,2,-10,-11,-19,-89,-3,-88,-123,-123,-123,2,-20,-94,-97,-93,-90,-116,-118,-120,-122,-119,2,-103,-98,-104,]),'NOTEQUAL':([31,32,33,34,36,37,38,41,49,59,80,98,99,100,102,110,111,112,113,114,115,116,117,118,120,121,122,123,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,159,161,162,176,179,182,202,],[-83,-80,-75,-82,-70,95,-81,-69,95,-77,95,95,-56,-60,95,95,95,95,95,95,95,95,95,95,95,95,-70,95,95,95,95,-55,95,95,-62,-53,-63,-52,-66,-68,-67,-61,-50,-65,95,-64,-51,-54,-70,95,-79,95,95,-78,95,]),'INTOEQ':([22,54,],[61,61,]),'MINUS':([31,32,33,34,36,37,38,41,49,59,80,98,99,100,102,110,111,112,113,114,115,116,117,118,120,121,122,123,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,159,161,162,176,179,182,202,],[-83,-80,-75,-82,-70,96,-81,-69,96,-77,96,96,-56,-60,96,96,96,96,96,96,96,96,96,96,96,96,-70,96,96,96,96,-55,96,96,96,-53,96,-52,96,96,96,96,-50,96,96,96,-51,-54,-70,96,-79,96,96,-78,96,]),'DOT':([17,],[51,]),'DIVIDE':([31,32,33,34,36,37,38,41,49,59,80,98,99,100,102,110,111,112,113,114,115,116,117,118,120,121,122,123,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,159,161,162,176,179,182,202,],[-83,-80,-75,-82,-70,84,-81,-69,84,-77,84,84,-56,-60,84,84,84,84,84,84,84,84,84,84,84,84,-70,84,84,84,84,-55,84,84,84,-53,84,-52,84,84,84,84,84,84,84,84,84,-54,-70,84,-79,84,84,-78,84,]),'BINAND':([31,32,33,34,36,37,38,41,49,59,80,98,99,100,102,110,111,112,113,114,115,116,117,118,120,121,122,123,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,159,161,162,176,179,182,202,],[-83,-80,-75,-82,-70,81,-81,-69,81,-77,81,81,-56,-60,81,81,81,81,81,81,81,81,81,81,81,81,-70,81,81,81,81,-55,-57,81,-62,-53,-63,-52,-66,-68,-67,-61,-50,-65,81,-64,-51,-54,-70,81,-79,81,81,-78,81,]),'INCR':([22,54,],[63,63,]),'XOREQ':([22,54,],[64,64,]),'LSHIFTEQ':([22,54,],[70,70,]),'SEMICOLON':([6,8,11,18,20,25,26,27,31,32,33,34,36,37,38,41,56,57,58,59,62,63,98,99,100,102,106,110,111,112,113,114,116,117,118,121,122,123,124,125,126,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,150,154,155,156,159,160,161,162,163,182,188,193,196,199,201,202,214,222,223,225,],[43,45,47,52,55,77,78,-73,-83,-80,-75,-82,-70,85,-81,-69,-26,-23,-25,-77,-36,-35,-71,-56,-60,-76,-44,-43,-33,-42,-39,-32,-41,-34,-37,-40,-70,-30,-72,-38,-31,-55,-57,-59,-62,-53,-63,-52,-66,-68,-67,-61,-50,-65,-58,-64,-51,-54,-105,167,-106,-108,-24,-25,-29,-70,-74,-28,-79,-84,-78,-107,207,-45,-27,-101,-109,221,-120,226,228,]),'STREQUAL':([31,32,33,34,36,37,38,41,49,59,80,98,99,100,102,110,111,112,113,114,115,116,117,118,120,121,122,123,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,159,161,162,176,179,182,202,],[-83,-80,-75,-82,-70,90,-81,-69,90,-77,90,90,-56,-60,90,90,90,90,90,90,90,90,90,90,90,90,-70,90,90,90,90,-55,90,90,-62,-53,-63,-52,-66,-68,-67,-61,-50,-65,90,-64,-51,-54,-70,90,-79,90,90,-78,90,]),'URSHIFTEQ':([22,54,],[65,65,]),'MINUSEQ':([22,54,],[66,66,]),'LT':([31,32,33,34,36,37,38,41,49,59,80,98,99,100,102,110,111,112,113,114,115,116,117,118,120,121,122,123,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,159,161,162,176,179,182,202,],[-83,-80,-75,-82,-70,91,-81,-69,91,-77,91,91,-56,-60,91,91,91,91,91,91,91,91,91,91,91,91,-70,91,91,91,91,-55,91,91,-62,-53,91,-52,-66,91,91,-61,-50,-65,91,91,-51,-54,-70,91,-79,91,91,-78,91,]),'CONTINUE':([0,4,5,12,13,16,23,24,43,45,47,52,55,76,77,78,85,151,165,170,200,203,204,205,207,212,213,215,216,217,218,222,226,229,232,233,235,236,],[26,-13,-15,-14,26,-17,-4,-16,-9,-12,-18,-7,-8,26,-10,-11,-19,-89,-3,-88,-123,-123,-123,26,-20,-94,-97,-93,-90,-116,-118,-120,-122,-119,26,-103,-98,-104,]),'PLUS':([31,32,33,34,36,37,38,41,49,59,80,98,99,100,102,110,111,112,113,114,115,116,117,118,120,121,122,123,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,159,161,162,176,179,182,202,],[-83,-80,-75,-82,-70,92,-81,-69,92,-77,92,92,-56,-60,92,92,92,92,92,92,92,92,92,92,92,92,-70,92,92,92,92,-55,92,92,92,-53,92,-52,92,92,92,92,-50,92,92,92,-51,-54,-70,92,-79,92,92,-78,92,]),'DECR':([22,54,],[62,62,]),'LEFTBRACKET':([22,36,109,122,157,159,162,187,195,197,],[67,67,157,67,157,67,67,157,157,157,]),'BINOR':([31,32,33,34,36,37,38,41,49,59,80,98,99,100,102,110,111,112,113,114,115,116,117,118,120,121,122,123,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,159,161,162,176,179,182,202,],[-83,-80,-75,-82,-70,94,-81,-69,94,-77,94,94,-56,-60,94,94,94,94,94,94,94,94,94,94,94,94,-70,94,94,94,94,-55,-57,-59,-62,-53,-63,-52,-66,-68,-67,-61,-50,-65,-58,-64,-51,-54,-70,94,-79,94,94,-78,94,]),'COMMA':([31,32,33,34,36,38,41,58,59,62,63,98,99,100,106,110,111,112,113,114,116,117,118,120,121,123,125,126,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,150,155,159,161,162,174,176,177,179,182,196,],[-83,-80,-75,-82,-70,-81,-69,108,-77,-36,-35,-71,-56,-60,-44,-43,-33,-42,-39,-32,-41,-34,-37,164,-40,-30,-38,-31,-55,-57,-59,-62,-53,-63,-52,-66,-68,-67,-61,-50,-65,-58,-64,-51,-54,169,108,-70,181,-79,192,194,195,197,-78,-45,]),'OREQ':([22,54,],[68,68,]),'DIVEQ':([22,54,],[69,69,]),'$end':([1,4,5,10,12,13,16,24,28,43,45,47,48,52,55,77,78,85,151,165,170,200,203,204,207,212,213,215,216,217,218,222,226,229,233,235,236,],[-2,-13,-15,0,-14,-6,-17,-16,-1,-9,-12,-18,-5,-7,-8,-10,-11,-19,-89,-3,-88,-123,-123,-123,-20,-94,-97,-93,-90,-116,-118,-120,-122,-119,-103,-98,-104,]),'FUNCTION':([0,4,5,12,13,16,23,24,43,45,47,52,55,76,77,78,85,109,151,165,170,200,203,204,205,207,212,213,215,216,217,218,222,226,229,232,233,235,236,],[15,-13,-15,-14,15,-17,-4,-16,-9,-12,-18,-7,-8,15,-10,-11,-19,158,-89,-3,-88,-123,-123,-123,15,-20,-94,-97,-93,-90,-116,-118,-120,-122,-119,15,-103,-98,-104,]),'RIGHTBRACKET':([31,32,33,34,36,38,41,59,98,99,100,115,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,162,177,178,179,182,196,209,210,],[-83,-80,-75,-82,-70,-81,-69,-77,-71,-56,-60,162,-55,-57,-59,-62,-53,-63,-52,-66,-68,-67,-61,-50,-65,-58,-64,-51,-54,-79,-47,196,-49,-78,-45,-46,-48,]),'GT':([31,32,33,34,36,37,38,41,49,59,80,98,99,100,102,110,111,112,113,114,115,116,117,118,120,121,122,123,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,159,161,162,176,179,182,202,],[-83,-80,-75,-82,-70,83,-81,-69,83,-77,83,83,-56,-60,83,83,83,83,83,83,83,83,83,83,83,83,-70,83,83,83,83,-55,83,83,-62,-53,83,-52,-66,83,83,-61,-50,-65,83,83,-51,-54,-70,83,-79,83,83,-78,83,]),'CONSOLE':([0,4,5,12,13,16,23,24,43,45,47,52,55,76,77,78,85,151,165,170,200,203,204,205,207,212,213,215,216,217,218,222,226,229,232,233,235,236,],[17,-13,-15,-14,17,-17,-4,-16,-9,-12,-18,-7,-8,17,-10,-11,-19,-89,-3,-88,-123,-123,-123,17,-20,-94,-97,-93,-90,-116,-118,-120,-122,-119,17,-103,-98,-104,]),'STRING':([3,14,35,39,40,42,46,60,61,64,65,66,67,68,69,70,71,72,73,74,75,79,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,107,109,153,157,164,167,186,187,194,195,197,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-100,34,34,34,34,34,]),'FOR':([0,4,5,12,13,16,23,24,43,45,47,52,55,76,77,78,85,151,165,170,200,203,204,205,207,212,213,215,216,217,218,222,226,229,232,233,235,236,],[7,-13,-15,-14,7,-17,-4,-16,-9,-12,-18,-7,-8,7,-10,-11,-19,-89,-3,-88,-123,-123,-123,7,-20,-94,-97,-93,-90,-116,-118,-120,-122,-119,7,-103,-98,-104,]),'LOG':([51,],[105,]),'INTO':([31,32,33,34,36,37,38,41,49,59,80,98,99,100,102,110,111,112,113,114,115,116,117,118,120,121,122,123,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,159,161,162,176,179,182,202,],[-83,-80,-75,-82,-70,87,-81,-69,87,-77,87,87,-56,-60,87,87,87,87,87,87,87,87,87,87,87,87,-70,87,87,87,87,-55,87,87,87,-53,87,-52,87,87,87,87,87,87,87,87,87,-54,-70,87,-79,87,87,-78,87,]),'LEFTPAREN':([0,2,3,4,5,7,12,13,14,16,19,22,23,24,29,30,35,39,40,42,43,44,45,46,47,50,52,55,60,61,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,101,104,105,107,109,122,151,153,157,158,159,164,165,167,169,170,180,186,187,194,195,197,200,203,204,205,207,212,213,215,216,217,218,221,222,226,228,229,232,233,235,236,],[19,-123,35,-13,-15,-99,-14,19,35,-17,19,71,-4,-16,79,-95,35,35,35,35,-9,101,-12,35,-18,-117,-7,-8,35,35,35,35,35,35,35,35,35,35,35,35,35,35,19,-10,-11,35,35,35,35,35,-19,35,35,35,35,35,35,35,35,35,35,35,35,19,152,153,35,35,71,-89,35,35,-121,71,35,-3,-100,19,-88,198,35,35,35,35,35,-123,-123,-123,19,-20,-94,-97,-93,-90,-116,-118,19,-120,-122,19,-119,19,-103,-98,-104,]),'RIGHTBRACE':([4,5,12,13,16,24,43,45,47,48,52,55,77,78,85,127,151,165,170,200,203,204,207,212,213,215,216,217,218,219,222,226,229,233,234,235,236,],[-13,-15,-14,-6,-17,-16,-9,-12,-18,-5,-7,-8,-10,-11,-19,165,-89,-3,-88,-123,-123,-123,-20,-94,-97,-93,-90,-116,-118,222,-120,-122,-119,-103,236,-98,-104,]),'ELSE':([151,165,],[171,-3,]),'ANDEQ':([22,54,],[72,72,]),'LTE':([31,32,33,34,36,37,38,41,49,59,80,98,99,100,102,110,111,112,113,114,115,116,117,118,120,121,122,123,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,159,161,162,176,179,182,202,],[-83,-80,-75,-82,-70,93,-81,-69,93,-77,93,93,-56,-60,93,93,93,93,93,93,93,93,93,93,93,93,-70,93,93,93,93,-55,93,93,-62,-53,93,-52,-66,93,93,-61,-50,-65,93,93,-51,-54,-70,93,-79,93,93,-78,93,]),'VAR':([0,4,5,12,13,16,23,24,43,45,47,52,55,76,77,78,85,101,151,165,170,200,203,204,205,207,212,213,215,216,217,218,222,226,229,232,233,235,236,],[21,-13,-15,-14,21,-17,-4,-16,-9,-12,-18,-7,-8,21,-10,-11,-19,148,-89,-3,-88,-123,-123,-123,21,-20,-94,-97,-93,-90,-116,-118,-120,-122,-119,21,-103,-98,-104,]),'EQ':([9,22,54,58,59,162,168,182,],[46,73,107,109,-77,-79,187,-78,]),'ID':([0,3,4,5,12,13,14,15,16,19,21,23,24,35,39,40,42,43,45,46,47,52,55,60,61,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,101,107,108,109,148,151,152,153,157,164,165,167,169,170,181,186,187,192,194,195,197,198,200,203,204,205,207,212,213,215,216,217,218,221,222,226,228,229,232,233,235,236,],[22,36,-13,-15,-14,22,36,50,-17,54,58,-4,-16,36,36,36,36,-9,-12,36,-18,-7,-8,36,36,36,36,36,36,36,36,36,36,36,122,36,36,22,-10,-11,36,36,36,36,36,-19,36,36,36,36,36,36,36,36,36,36,36,36,54,36,155,159,168,-89,174,36,36,36,-3,-100,54,-88,168,36,36,174,36,36,36,174,-123,-123,-123,22,-20,-94,-97,-93,-90,-116,-118,54,-120,-122,54,-119,22,-103,-98,-104,]),'IF':([0,4,5,12,13,16,23,24,43,45,47,52,55,76,77,78,85,151,165,170,200,203,204,205,207,212,213,215,216,217,218,222,226,229,232,233,235,236,],[14,-13,-15,-14,14,-17,-4,-16,-9,-12,-18,-7,-8,14,-10,-11,-19,-89,-3,-88,-123,-123,-123,14,-20,-94,-97,-93,-90,-116,-118,-120,-122,-119,14,-103,-98,-104,]),'RSHIFTEQ':([22,54,],[74,74,]),'LEFTBRACE':([0,31,32,33,34,36,38,41,49,59,98,99,100,103,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,162,166,171,182,184,185,189,190,191,220,230,],[23,-83,-80,-75,-82,-70,-81,-69,-91,-77,-71,-56,-60,23,-55,-57,-59,-62,-53,-63,-52,-66,-68,-67,-61,-50,-65,-58,-64,-51,-54,-79,-123,-123,-78,23,-96,23,-92,205,205,232,]),'PLUSEQ':([22,54,],[75,75,]),'GTE':([31,32,33,34,36,37,38,41,49,59,80,98,99,100,102,110,111,112,113,114,115,116,117,118,120,121,122,123,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,159,161,162,176,179,182,202,],[-83,-80,-75,-82,-70,88,-81,-69,88,-77,88,88,-56,-60,88,88,88,88,88,88,88,88,88,88,88,88,-70,88,88,88,88,-55,88,88,-62,-53,88,-52,-66,88,88,-61,-50,-65,88,88,-51,-54,-70,88,-79,88,88,-78,88,]),'BREAK':([0,4,5,12,13,16,23,24,43,45,47,52,55,76,77,78,85,151,165,170,200,203,204,205,207,212,213,215,216,217,218,222,226,229,232,233,235,236,],[25,-13,-15,-14,25,-17,-4,-16,-9,-12,-18,-7,-8,25,-10,-11,-19,-89,-3,-88,-123,-123,-123,25,-20,-94,-97,-93,-90,-116,-118,-120,-122,-119,25,-103,-98,-104,]),'DOUBLEEQ':([31,32,33,34,36,37,38,41,49,59,80,98,99,100,102,110,111,112,113,114,115,116,117,118,120,121,122,123,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,159,161,162,176,179,182,202,],[-83,-80,-75,-82,-70,86,-81,-69,86,-77,86,86,-56,-60,86,86,86,86,86,86,86,86,86,86,86,86,-70,86,86,86,86,-55,86,86,-62,-53,-63,-52,-66,-68,-67,-61,-50,-65,86,-64,-51,-54,-70,86,-79,86,86,-78,86,]),'BOOLEAN':([3,14,35,39,40,42,46,60,61,64,65,66,67,68,69,70,71,72,73,74,75,79,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,107,109,153,157,164,167,186,187,194,195,197,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-100,38,38,38,38,38,]),'TYPEOF':([3,14,35,39,40,42,46,60,61,64,65,66,67,68,69,70,71,72,73,74,75,79,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,107,109,153,157,164,167,186,187,194,195,197,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-100,39,39,39,39,39,]),'NOT':([3,14,35,39,40,42,46,60,61,64,65,66,67,68,69,70,71,72,73,74,75,79,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,107,109,153,157,164,167,186,187,194,195,197,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-100,40,40,40,40,40,]),'RIGHTPAREN':([31,32,33,34,36,38,41,53,59,62,63,71,80,98,99,100,106,110,111,112,113,114,116,117,118,119,120,121,123,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,152,162,164,172,173,174,175,176,182,183,192,198,206,208,211,224,225,227,231,],[-83,-80,-75,-82,-70,-81,-69,106,-77,-36,-35,-87,129,-71,-56,-60,-44,-43,-33,-42,-39,-32,-41,-34,-37,163,-85,-40,-30,-38,-31,166,-55,-57,-59,-62,-53,-63,-52,-66,-68,-67,-61,-50,-65,-58,-64,-51,-54,-115,-79,-87,191,-112,-114,193,-22,-78,-86,-115,-115,-113,-21,220,-102,-111,230,-110,]),'BINNOT':([3,14,35,39,40,42,46,60,61,64,65,66,67,68,69,70,71,72,73,74,75,79,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,107,109,153,157,164,167,186,187,194,195,197,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-100,42,42,42,42,42,]),'MOD':([31,32,33,34,36,37,38,41,49,59,80,98,99,100,102,110,111,112,113,114,115,116,117,118,120,121,122,123,125,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,159,161,162,176,179,182,202,],[-83,-80,-75,-82,-70,97,-81,-69,97,-77,97,97,-56,-60,97,97,97,97,97,97,97,97,97,97,97,97,-70,97,97,97,97,-55,97,97,97,-53,97,-52,97,97,97,97,97,97,97,97,97,-54,-70,97,-79,97,97,-78,97,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'funcscopedefnormal':([50,],[104,]),'whileblockstart':([2,],[29,]),'statements':([0,13,76,205,232,],[1,48,127,219,234,]),'reference':([22,36,122,159,162,],[59,59,59,59,182,]),'elseblock':([171,],[189,]),'printList':([153,194,],[175,208,]),'increment':([221,228,],[224,231,]),'array':([109,157,187,195,197,],[156,177,156,177,177,]),'funblock':([191,220,],[204,223,]),'if':([0,13,76,205,232,],[4,4,4,4,4,]),'whileloop':([0,13,76,205,232,],[5,5,5,5,5,]),'funcstmt':([0,13,76,205,232,],[8,8,8,8,8,]),'funcarghead':([152,198,],[172,211,]),'reassignmentarray':([0,13,76,205,232,],[11,11,11,11,11,]),'start':([0,],[10,]),'arrayCall':([0,3,13,14,35,39,40,42,46,60,61,64,65,66,67,68,69,70,71,72,73,74,75,76,79,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,107,109,153,157,164,186,187,194,195,197,205,232,],[9,33,9,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,9,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,9,9,]),'ifelse':([0,13,76,205,232,],[12,12,12,12,12,]),'statement':([0,13,76,205,232,],[13,13,13,13,13,]),'forexpr_marker':([167,],[186,]),'forcheck_marker':([201,],[214,]),'increment_marker':([224,],[227,]),'argList':([71,164,],[119,183,]),'arrayList':([157,195,197,],[178,209,210,]),'empty':([2,166,171,200,203,204,],[30,185,190,213,215,218,]),'forloop':([0,13,76,205,232,],[16,16,16,16,16,]),'endfuncdecl':([226,],[229,]),'ifblockend':([151,],[170,]),'endblock_marker':([233,],[235,]),'assignment':([0,13,76,101,205,232,],[18,18,18,146,18,18,]),'initialization':([101,],[147,]),'declarationList':([21,108,],[57,154,]),'scope_marker':([7,],[44,]),'funcscopedef':([158,],[180,]),'forblock':([230,],[233,]),'declaration':([0,13,76,205,232,],[20,20,20,20,20,]),'blockmarker':([23,],[76,]),'endfunc':([204,],[217,]),'elseblockend':([203,],[216,]),'assignlist':([21,148,181,],[56,56,199,]),'whileblockend':([200,],[212,]),'funcdecl':([0,13,76,205,232,],[24,24,24,24,24,]),'reinitialization':([101,169,],[149,188,]),'reassignment':([0,13,19,76,101,169,205,221,228,232,],[6,6,53,6,150,150,6,225,225,6,]),'exprcheck':([166,],[184,]),'functioncall':([0,13,73,76,109,205,232,],[27,27,124,27,160,27,27,]),'for_expr':([186,],[201,]),'ifelseblock':([49,],[103,]),'expression':([3,14,35,39,40,42,46,60,61,64,65,66,67,68,69,70,71,72,73,74,75,79,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,107,109,153,157,164,186,187,194,195,197,],[37,49,80,98,99,100,102,110,111,112,113,114,115,116,117,118,120,121,123,125,126,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,123,161,176,179,120,202,161,176,179,179,]),'funcargList':([152,192,198,],[173,206,173,]),'block':([0,103,184,189,],[28,151,200,203,]),'basicTypes':([3,14,35,39,40,42,46,60,61,64,65,66,67,68,69,70,71,72,73,74,75,79,81,82,83,84,86,87,88,89,90,91,92,93,94,95,96,97,107,109,153,157,164,186,187,194,195,197,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> block','start',1,'p_start','stage1parsing.py',149),
  ('start -> statements','start',1,'p_start','stage1parsing.py',150),
  ('block -> LEFTBRACE blockmarker statements RIGHTBRACE','block',4,'p_block','stage1parsing.py',154),
  ('blockmarker -> <empty>','blockmarker',0,'p_blockmarker','stage1parsing.py',159),
  ('statements -> statement statements','statements',2,'p_statements','stage1parsing.py',164),
  ('statements -> statement','statements',1,'p_statements','stage1parsing.py',165),
  ('statement -> assignment SEMICOLON','statement',2,'p_statement_semicolon','stage1parsing.py',170),
  ('statement -> declaration SEMICOLON','statement',2,'p_statement_semicolon','stage1parsing.py',171),
  ('statement -> reassignment SEMICOLON','statement',2,'p_statement_semicolon','stage1parsing.py',172),
  ('statement -> BREAK SEMICOLON','statement',2,'p_statement_semicolon','stage1parsing.py',173),
  ('statement -> CONTINUE SEMICOLON','statement',2,'p_statement_semicolon','stage1parsing.py',174),
  ('statement -> funcstmt SEMICOLON','statement',2,'p_statement_semicolon','stage1parsing.py',175),
  ('statement -> if','statement',1,'p_statement_semicolon','stage1parsing.py',176),
  ('statement -> ifelse','statement',1,'p_statement_semicolon','stage1parsing.py',177),
  ('statement -> whileloop','statement',1,'p_statement_semicolon','stage1parsing.py',178),
  ('statement -> funcdecl','statement',1,'p_statement_semicolon','stage1parsing.py',179),
  ('statement -> forloop','statement',1,'p_statement_semicolon','stage1parsing.py',180),
  ('statement -> reassignmentarray SEMICOLON','statement',2,'p_statement_semicolon','stage1parsing.py',181),
  ('statement -> RETURN expression SEMICOLON','statement',3,'p_return_expression','stage1parsing.py',186),
  ('statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON','statement',7,'p_statement_print','stage1parsing.py',193),
  ('printList -> expression COMMA printList','printList',3,'p_printList','stage1parsing.py',200),
  ('printList -> expression','printList',1,'p_printList_base','stage1parsing.py',206),
  ('declaration -> VAR declarationList','declaration',2,'p_declaration','stage1parsing.py',215),
  ('declarationList -> ID COMMA declarationList','declarationList',3,'p_declarationList','stage1parsing.py',225),
  ('declarationList -> ID','declarationList',1,'p_declaration_base','stage1parsing.py',230),
  ('assignment -> VAR assignlist','assignment',2,'p_assignment','stage1parsing.py',237),
  ('assignlist -> ID EQ expression COMMA assignlist','assignlist',5,'p_assignlist','stage1parsing.py',252),
  ('assignlist -> ID EQ expression','assignlist',3,'p_assignlist_base','stage1parsing.py',260),
  ('assignlist -> ID EQ array','assignlist',3,'p_assignlist_array','stage1parsing.py',269),
  ('reassignment -> ID EQ expression','reassignment',3,'p_assignment_arith','stage1parsing.py',296),
  ('reassignment -> ID PLUSEQ expression','reassignment',3,'p_assignment_arith','stage1parsing.py',297),
  ('reassignment -> ID MINUSEQ expression','reassignment',3,'p_assignment_arith','stage1parsing.py',298),
  ('reassignment -> ID INTOEQ expression','reassignment',3,'p_assignment_arith','stage1parsing.py',299),
  ('reassignment -> ID DIVEQ expression','reassignment',3,'p_assignment_arith','stage1parsing.py',300),
  ('reassignment -> ID INCR','reassignment',2,'p_reassignment_incr','stage1parsing.py',339),
  ('reassignment -> ID DECR','reassignment',2,'p_reassignment_incr','stage1parsing.py',340),
  ('reassignment -> ID LSHIFTEQ expression','reassignment',3,'p_reassignment_shift','stage1parsing.py',361),
  ('reassignment -> ID RSHIFTEQ expression','reassignment',3,'p_reassignment_shift','stage1parsing.py',362),
  ('reassignment -> ID URSHIFTEQ expression','reassignment',3,'p_reassignment_shift','stage1parsing.py',363),
  ('reassignment -> ID ANDEQ expression','reassignment',3,'p_reassignment_shift','stage1parsing.py',364),
  ('reassignment -> ID OREQ expression','reassignment',3,'p_reassignment_shift','stage1parsing.py',365),
  ('reassignment -> ID XOREQ expression','reassignment',3,'p_reassignment_shift','stage1parsing.py',366),
  ('reassignment -> ID MODEQ expression','reassignment',3,'p_reassignment_shift','stage1parsing.py',367),
  ('reassignment -> LEFTPAREN reassignment RIGHTPAREN','reassignment',3,'p_reassignment_shift','stage1parsing.py',368),
  ('array -> LEFTBRACKET arrayList RIGHTBRACKET','array',3,'p_array','stage1parsing.py',379),
  ('arrayList -> array COMMA arrayList','arrayList',3,'p_arrayList_array','stage1parsing.py',383),
  ('arrayList -> array','arrayList',1,'p_arrayList_base_array','stage1parsing.py',393),
  ('arrayList -> expression COMMA arrayList','arrayList',3,'p_arrayList_exp','stage1parsing.py',401),
  ('arrayList -> expression','arrayList',1,'p_arrayList_base_exp','stage1parsing.py',414),
  ('expression -> expression PLUS expression','expression',3,'p_expression_op','stage1parsing.py',447),
  ('expression -> expression MINUS expression','expression',3,'p_expression_op','stage1parsing.py',448),
  ('expression -> expression INTO expression','expression',3,'p_expression_op','stage1parsing.py',449),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_op','stage1parsing.py',450),
  ('expression -> expression MOD expression','expression',3,'p_expression_op','stage1parsing.py',451),
  ('expression -> LEFTPAREN expression RIGHTPAREN','expression',3,'p_groupExp','stage1parsing.py',463),
  ('expression -> NOT expression','expression',2,'p_expression_not','stage1parsing.py',468),
  ('expression -> expression BINAND expression','expression',3,'p_expression_binop','stage1parsing.py',481),
  ('expression -> expression BINOR expression','expression',3,'p_expression_binop','stage1parsing.py',482),
  ('expression -> expression BINXOR expression','expression',3,'p_expression_binop','stage1parsing.py',483),
  ('expression -> BINNOT expression','expression',2,'p_expression_binop','stage1parsing.py',484),
  ('expression -> expression LT expression','expression',3,'p_expression_relop','stage1parsing.py',488),
  ('expression -> expression GT expression','expression',3,'p_expression_relop','stage1parsing.py',489),
  ('expression -> expression DOUBLEEQ expression','expression',3,'p_expression_relop','stage1parsing.py',490),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_expression_relop','stage1parsing.py',491),
  ('expression -> expression LTE expression','expression',3,'p_expression_relop','stage1parsing.py',492),
  ('expression -> expression GTE expression','expression',3,'p_expression_relop','stage1parsing.py',493),
  ('expression -> expression STREQUAL expression','expression',3,'p_expression_strop','stage1parsing.py',523),
  ('expression -> expression STRNEQUAL expression','expression',3,'p_expression_strop','stage1parsing.py',524),
  ('expression -> basicTypes','expression',1,'p_expression_basic','stage1parsing.py',555),
  ('expression -> ID','expression',1,'p_expression_id','stage1parsing.py',565),
  ('expression -> TYPEOF expression','expression',2,'p_expression_type','stage1parsing.py',580),
  ('funcstmt -> ID EQ functioncall','funcstmt',3,'p_expression_functioncall_id','stage1parsing.py',585),
  ('funcstmt -> functioncall','funcstmt',1,'p_expression_functioncall','stage1parsing.py',604),
  ('funcstmt -> VAR ID EQ functioncall','funcstmt',4,'p_expression_functioncall_varid','stage1parsing.py',610),
  ('expression -> arrayCall','expression',1,'p_expression_arraycall','stage1parsing.py',625),
  ('reassignmentarray -> arrayCall EQ expression','reassignmentarray',3,'p_reassignment_array','stage1parsing.py',633),
  ('arrayCall -> ID reference','arrayCall',2,'p_arrayCall','stage1parsing.py',639),
  ('reference -> LEFTBRACKET expression RIGHTBRACKET reference','reference',4,'p_reference','stage1parsing.py',671),
  ('reference -> LEFTBRACKET expression RIGHTBRACKET','reference',3,'p_reference_base','stage1parsing.py',680),
  ('basicTypes -> NUMBER','basicTypes',1,'p_basicTypes_number','stage1parsing.py',691),
  ('basicTypes -> BOOLEAN','basicTypes',1,'p_basicTypes_boolean','stage1parsing.py',695),
  ('basicTypes -> STRING','basicTypes',1,'p_basicTypes_string','stage1parsing.py',703),
  ('basicTypes -> UNDEFINED','basicTypes',1,'p_basicTypes_undefined','stage1parsing.py',709),
  ('functioncall -> ID LEFTPAREN argList RIGHTPAREN','functioncall',4,'p_functioncall','stage1parsing.py',716),
  ('argList -> expression','argList',1,'p_arglist_expr','stage1parsing.py',726),
  ('argList -> expression COMMA argList','argList',3,'p_argList','stage1parsing.py',730),
  ('argList -> <empty>','argList',0,'p_argList_base','stage1parsing.py',734),
  ('if -> IF expression ifelseblock block ifblockend','if',5,'p_if','stage1parsing.py',739),
  ('ifblockend -> <empty>','ifblockend',0,'p_ifblockendmarker','stage1parsing.py',742),
  ('ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend','ifelse',8,'p_ifelse','stage1parsing.py',747),
  ('ifelseblock -> <empty>','ifelseblock',0,'p_ifelseblock_marker','stage1parsing.py',750),
  ('elseblock -> empty','elseblock',1,'p_elseblock_marker','stage1parsing.py',764),
  ('elseblockend -> empty','elseblockend',1,'p_elseblockend_marker','stage1parsing.py',769),
  ('whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend','whileloop',8,'p_whileloop','stage1parsing.py',774),
  ('whileblockstart -> empty','whileblockstart',1,'p_whileblockstart','stage1parsing.py',777),
  ('exprcheck -> empty','exprcheck',1,'p_exprcheck','stage1parsing.py',784),
  ('whileblockend -> empty','whileblockend',1,'p_whileblockend','stage1parsing.py',790),
  ('forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker','forloop',14,'p_forloop','stage1parsing.py',795),
  ('scope_marker -> <empty>','scope_marker',0,'p_scope_marker','stage1parsing.py',798),
  ('forexpr_marker -> <empty>','forexpr_marker',0,'p_forexpr_marker','stage1parsing.py',802),
  ('forcheck_marker -> <empty>','forcheck_marker',0,'p_forcheck_marker','stage1parsing.py',811),
  ('increment_marker -> <empty>','increment_marker',0,'p_increment_marker','stage1parsing.py',819),
  ('endblock_marker -> <empty>','endblock_marker',0,'p_endblock_marker','stage1parsing.py',823),
  ('forblock -> LEFTBRACE statements RIGHTBRACE','forblock',3,'p_forblock','stage1parsing.py',829),
  ('initialization -> assignment','initialization',1,'p_initialization','stage1parsing.py',832),
  ('initialization -> reinitialization','initialization',1,'p_initialization','stage1parsing.py',833),
  ('reinitialization -> reassignment COMMA reinitialization','reinitialization',3,'p_reinitialization','stage1parsing.py',835),
  ('reinitialization -> reassignment','reinitialization',1,'p_reinitialization','stage1parsing.py',836),
  ('for_expr -> expression','for_expr',1,'p_for_expr','stage1parsing.py',840),
  ('increment -> reassignment SEMICOLON increment','increment',3,'p_increment','stage1parsing.py',844),
  ('increment -> reassignment','increment',1,'p_increment','stage1parsing.py',845),
  ('funcarghead -> funcargList','funcarghead',1,'p_funcarghead','stage1parsing.py',849),
  ('funcargList -> ID COMMA funcargList','funcargList',3,'p_funcargList','stage1parsing.py',861),
  ('funcargList -> ID','funcargList',1,'p_funcargList_base','stage1parsing.py',866),
  ('funcargList -> <empty>','funcargList',0,'p_funcargList_empty','stage1parsing.py',870),
  ('funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc','funcdecl',8,'p_funcdecl_normal','stage1parsing.py',876),
  ('funcscopedefnormal -> <empty>','funcscopedefnormal',0,'p_funcscopedefnormal','stage1parsing.py',880),
  ('endfunc -> empty','endfunc',1,'p_endfunc','stage1parsing.py',895),
  ('funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl','funcdecl',11,'p_funcdecl_vardecl','stage1parsing.py',902),
  ('funblock -> LEFTBRACE statements RIGHTBRACE','funblock',3,'p_funblock','stage1parsing.py',906),
  ('funcscopedef -> <empty>','funcscopedef',0,'p_funcscopedef','stage1parsing.py',909),
  ('endfuncdecl -> <empty>','endfuncdecl',0,'p_endfuncdecl','stage1parsing.py',924),
  ('empty -> <empty>','empty',0,'p_empty','stage1parsing.py',929),
]
