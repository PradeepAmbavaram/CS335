Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LCOMMENT
    DO
    SETPROP
    GETPROP
    LSHIFT
    NEW
    WITH
    EXPONENT
    SWITCH
    COLON
    GETP
    CASE
    URSHIFT
    REGEX
    AND
    BCOMMENT
    RSHIFT
    SETP
    CONDOP
    THIS
    OR
    DELETE

Grammar

Rule 0     S' -> start
Rule 1     start -> block
Rule 2     start -> statements
Rule 3     block -> LEFTBRACE blockmarker statements RIGHTBRACE
Rule 4     blockmarker -> <empty>
Rule 5     statements -> statement statements
Rule 6     statements -> statement
Rule 7     statement -> assignment SEMICOLON
Rule 8     statement -> declaration SEMICOLON
Rule 9     statement -> reassignment SEMICOLON
Rule 10    statement -> BREAK SEMICOLON
Rule 11    statement -> CONTINUE SEMICOLON
Rule 12    statement -> funcstmt SEMICOLON
Rule 13    statement -> if
Rule 14    statement -> ifelse
Rule 15    statement -> whileloop
Rule 16    statement -> funcdecl
Rule 17    statement -> forloop
Rule 18    statement -> reassignmentarray SEMICOLON
Rule 19    statement -> RETURN expression SEMICOLON
Rule 20    statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON
Rule 21    printList -> expression COMMA printList
Rule 22    printList -> expression
Rule 23    declaration -> VAR declarationList
Rule 24    declarationList -> ID COMMA declarationList
Rule 25    declarationList -> ID
Rule 26    assignment -> VAR assignlist
Rule 27    assignlist -> ID EQ expression COMMA assignlist
Rule 28    assignlist -> ID EQ expression
Rule 29    assignlist -> ID EQ array
Rule 30    reassignment -> ID EQ expression
Rule 31    reassignment -> ID PLUSEQ expression
Rule 32    reassignment -> ID MINUSEQ expression
Rule 33    reassignment -> ID INTOEQ expression
Rule 34    reassignment -> ID DIVEQ expression
Rule 35    reassignment -> ID INCR
Rule 36    reassignment -> ID DECR
Rule 37    reassignment -> ID LSHIFTEQ expression
Rule 38    reassignment -> ID RSHIFTEQ expression
Rule 39    reassignment -> ID URSHIFTEQ expression
Rule 40    reassignment -> ID ANDEQ expression
Rule 41    reassignment -> ID OREQ expression
Rule 42    reassignment -> ID XOREQ expression
Rule 43    reassignment -> ID MODEQ expression
Rule 44    reassignment -> LEFTPAREN reassignment RIGHTPAREN
Rule 45    array -> LEFTBRACKET arrayList RIGHTBRACKET
Rule 46    arrayList -> array COMMA arrayList
Rule 47    arrayList -> array
Rule 48    arrayList -> expression COMMA arrayList
Rule 49    arrayList -> expression
Rule 50    expression -> expression PLUS expression
Rule 51    expression -> expression MINUS expression
Rule 52    expression -> expression INTO expression
Rule 53    expression -> expression DIVIDE expression
Rule 54    expression -> expression MOD expression
Rule 55    expression -> LEFTPAREN expression RIGHTPAREN
Rule 56    expression -> NOT expression
Rule 57    expression -> expression BINAND expression
Rule 58    expression -> expression BINOR expression
Rule 59    expression -> expression BINXOR expression
Rule 60    expression -> BINNOT expression
Rule 61    expression -> expression LT expression
Rule 62    expression -> expression GT expression
Rule 63    expression -> expression DOUBLEEQ expression
Rule 64    expression -> expression NOTEQUAL expression
Rule 65    expression -> expression LTE expression
Rule 66    expression -> expression GTE expression
Rule 67    expression -> expression STREQUAL expression
Rule 68    expression -> expression STRNEQUAL expression
Rule 69    expression -> basicTypes
Rule 70    expression -> ID
Rule 71    expression -> TYPEOF expression
Rule 72    funcstmt -> ID EQ functioncall
Rule 73    funcstmt -> functioncall
Rule 74    funcstmt -> VAR ID EQ functioncall
Rule 75    expression -> arrayCall
Rule 76    reassignmentarray -> arrayCall EQ expression
Rule 77    arrayCall -> ID reference
Rule 78    reference -> LEFTBRACKET expression RIGHTBRACKET reference
Rule 79    reference -> LEFTBRACKET expression RIGHTBRACKET
Rule 80    basicTypes -> NUMBER
Rule 81    basicTypes -> BOOLEAN
Rule 82    basicTypes -> STRING
Rule 83    basicTypes -> UNDEFINED
Rule 84    functioncall -> ID LEFTPAREN argList RIGHTPAREN
Rule 85    argList -> expression
Rule 86    argList -> expression COMMA argList
Rule 87    argList -> <empty>
Rule 88    if -> IF expression ifelseblock block ifblockend
Rule 89    ifblockend -> <empty>
Rule 90    ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend
Rule 91    ifelseblock -> <empty>
Rule 92    elseblock -> empty
Rule 93    elseblockend -> empty
Rule 94    whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend
Rule 95    whileblockstart -> empty
Rule 96    exprcheck -> empty
Rule 97    whileblockend -> empty
Rule 98    forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker
Rule 99    scope_marker -> <empty>
Rule 100   forexpr_marker -> <empty>
Rule 101   forcheck_marker -> <empty>
Rule 102   increment_marker -> <empty>
Rule 103   endblock_marker -> <empty>
Rule 104   forblock -> LEFTBRACE statements RIGHTBRACE
Rule 105   initialization -> assignment
Rule 106   initialization -> reinitialization
Rule 107   reinitialization -> reassignment COMMA reinitialization
Rule 108   reinitialization -> reassignment
Rule 109   for_expr -> expression
Rule 110   increment -> reassignment SEMICOLON increment
Rule 111   increment -> reassignment
Rule 112   funcarghead -> funcargList
Rule 113   funcargList -> ID COMMA funcargList
Rule 114   funcargList -> ID
Rule 115   funcargList -> <empty>
Rule 116   funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc
Rule 117   funcscopedefnormal -> <empty>
Rule 118   endfunc -> empty
Rule 119   funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl
Rule 120   funblock -> LEFTBRACE statements RIGHTBRACE
Rule 121   funcscopedef -> <empty>
Rule 122   endfuncdecl -> <empty>
Rule 123   empty -> <empty>

Terminals, with rules where they appear

AND                  : 
ANDEQ                : 40
BCOMMENT             : 
BINAND               : 57
BINNOT               : 60
BINOR                : 58
BINXOR               : 59
BOOLEAN              : 81
BREAK                : 10
CASE                 : 
COLON                : 
COMMA                : 21 24 27 46 48 86 107 113
CONDOP               : 
CONSOLE              : 20
CONTINUE             : 11
DECR                 : 36
DELETE               : 
DIVEQ                : 34
DIVIDE               : 53
DO                   : 
DOT                  : 20
DOUBLEEQ             : 63
ELSE                 : 90
EQ                   : 27 28 29 30 72 74 76 119
EXPONENT             : 
FOR                  : 98
FUNCTION             : 116 119
GETP                 : 
GETPROP              : 
GT                   : 62
GTE                  : 66
ID                   : 24 25 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 70 72 74 77 84 113 114 116 119
IF                   : 88 90
INCR                 : 35
INTO                 : 52
INTOEQ               : 33
LCOMMENT             : 
LEFTBRACE            : 3 104 120
LEFTBRACKET          : 45 78 79
LEFTPAREN            : 20 44 55 84 94 98 116 119
LOG                  : 20
LSHIFT               : 
LSHIFTEQ             : 37
LT                   : 61
LTE                  : 65
MINUS                : 51
MINUSEQ              : 32
MOD                  : 54
MODEQ                : 43
NEW                  : 
NOT                  : 56
NOTEQUAL             : 64
NUMBER               : 80
OR                   : 
OREQ                 : 41
PLUS                 : 50
PLUSEQ               : 31
REGEX                : 
RETURN               : 19
RIGHTBRACE           : 3 104 120
RIGHTBRACKET         : 45 78 79
RIGHTPAREN           : 20 44 55 84 94 98 116 119
RSHIFT               : 
RSHIFTEQ             : 38
SEMICOLON            : 7 8 9 10 11 12 18 19 20 98 98 110 119
SETP                 : 
SETPROP              : 
STREQUAL             : 67
STRING               : 82
STRNEQUAL            : 68
SWITCH               : 
THIS                 : 
TYPEOF               : 71
UNDEFINED            : 83
URSHIFT              : 
URSHIFTEQ            : 39
VAR                  : 23 26 74 119
WHILE                : 94
WITH                 : 
XOREQ                : 42
error                : 

Nonterminals, with rules where they appear

argList              : 84 86
array                : 29 46 47
arrayCall            : 75 76
arrayList            : 45 46 48
assignlist           : 26 27
assignment           : 7 105
basicTypes           : 69
block                : 1 88 90 90 94
blockmarker          : 3
declaration          : 8
declarationList      : 23 24
elseblock            : 90
elseblockend         : 90
empty                : 92 93 95 96 97 118
endblock_marker      : 98
endfunc              : 116
endfuncdecl          : 119
exprcheck            : 94
expression           : 19 21 22 27 28 30 31 32 33 34 37 38 39 40 41 42 43 48 49 50 50 51 51 52 52 53 53 54 54 55 56 57 57 58 58 59 59 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 71 76 78 79 85 86 88 90 94 109
for_expr             : 98
forblock             : 98
forcheck_marker      : 98
forexpr_marker       : 98
forloop              : 17
funblock             : 116 119
funcargList          : 112 113
funcarghead          : 116 119
funcdecl             : 16
funcscopedef         : 119
funcscopedefnormal   : 116
funcstmt             : 12
functioncall         : 72 73 74
if                   : 13
ifblockend           : 88
ifelse               : 14
ifelseblock          : 88 90
increment            : 98 110
increment_marker     : 98
initialization       : 98
printList            : 20 21
reassignment         : 9 44 107 108 110 111
reassignmentarray    : 18
reference            : 77 78
reinitialization     : 106 107
scope_marker         : 98
start                : 0
statement            : 5 6
statements           : 2 3 5 104 120
whileblockend        : 94
whileblockstart      : 94
whileloop            : 15

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . block
    (2) start -> . statements
    (3) block -> . LEFTBRACE blockmarker statements RIGHTBRACE
    (5) statements -> . statement statements
    (6) statements -> . statement
    (7) statement -> . assignment SEMICOLON
    (8) statement -> . declaration SEMICOLON
    (9) statement -> . reassignment SEMICOLON
    (10) statement -> . BREAK SEMICOLON
    (11) statement -> . CONTINUE SEMICOLON
    (12) statement -> . funcstmt SEMICOLON
    (13) statement -> . if
    (14) statement -> . ifelse
    (15) statement -> . whileloop
    (16) statement -> . funcdecl
    (17) statement -> . forloop
    (18) statement -> . reassignmentarray SEMICOLON
    (19) statement -> . RETURN expression SEMICOLON
    (20) statement -> . CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON
    (26) assignment -> . VAR assignlist
    (23) declaration -> . VAR declarationList
    (30) reassignment -> . ID EQ expression
    (31) reassignment -> . ID PLUSEQ expression
    (32) reassignment -> . ID MINUSEQ expression
    (33) reassignment -> . ID INTOEQ expression
    (34) reassignment -> . ID DIVEQ expression
    (35) reassignment -> . ID INCR
    (36) reassignment -> . ID DECR
    (37) reassignment -> . ID LSHIFTEQ expression
    (38) reassignment -> . ID RSHIFTEQ expression
    (39) reassignment -> . ID URSHIFTEQ expression
    (40) reassignment -> . ID ANDEQ expression
    (41) reassignment -> . ID OREQ expression
    (42) reassignment -> . ID XOREQ expression
    (43) reassignment -> . ID MODEQ expression
    (44) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (72) funcstmt -> . ID EQ functioncall
    (73) funcstmt -> . functioncall
    (74) funcstmt -> . VAR ID EQ functioncall
    (88) if -> . IF expression ifelseblock block ifblockend
    (90) ifelse -> . IF expression ifelseblock block ELSE elseblock block elseblockend
    (94) whileloop -> . WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend
    (116) funcdecl -> . FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc
    (119) funcdecl -> . VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl
    (98) forloop -> . FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker
    (76) reassignmentarray -> . arrayCall EQ expression
    (84) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (77) arrayCall -> . ID reference

    LEFTBRACE       shift and go to state 23
    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 3
    CONSOLE         shift and go to state 17
    VAR             shift and go to state 21
    ID              shift and go to state 22
    LEFTPAREN       shift and go to state 19
    IF              shift and go to state 14
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 15
    FOR             shift and go to state 7

    statements                     shift and go to state 1
    if                             shift and go to state 4
    whileloop                      shift and go to state 5
    funcstmt                       shift and go to state 8
    arrayCall                      shift and go to state 9
    start                          shift and go to state 10
    reassignmentarray              shift and go to state 11
    ifelse                         shift and go to state 12
    statement                      shift and go to state 13
    forloop                        shift and go to state 16
    assignment                     shift and go to state 18
    declaration                    shift and go to state 20
    funcdecl                       shift and go to state 24
    reassignment                   shift and go to state 6
    functioncall                   shift and go to state 27
    block                          shift and go to state 28

state 1

    (2) start -> statements .

    $end            reduce using rule 2 (start -> statements .)


state 2

    (94) whileloop -> WHILE . whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend
    (95) whileblockstart -> . empty
    (123) empty -> .

    LEFTPAREN       reduce using rule 123 (empty -> .)

    whileblockstart                shift and go to state 29
    empty                          shift and go to state 30

state 3

    (19) statement -> RETURN . expression SEMICOLON
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 37
    basicTypes                     shift and go to state 41

state 4

    (13) statement -> if .

    BREAK           reduce using rule 13 (statement -> if .)
    CONTINUE        reduce using rule 13 (statement -> if .)
    RETURN          reduce using rule 13 (statement -> if .)
    CONSOLE         reduce using rule 13 (statement -> if .)
    VAR             reduce using rule 13 (statement -> if .)
    ID              reduce using rule 13 (statement -> if .)
    LEFTPAREN       reduce using rule 13 (statement -> if .)
    IF              reduce using rule 13 (statement -> if .)
    WHILE           reduce using rule 13 (statement -> if .)
    FUNCTION        reduce using rule 13 (statement -> if .)
    FOR             reduce using rule 13 (statement -> if .)
    $end            reduce using rule 13 (statement -> if .)
    RIGHTBRACE      reduce using rule 13 (statement -> if .)


state 5

    (15) statement -> whileloop .

    BREAK           reduce using rule 15 (statement -> whileloop .)
    CONTINUE        reduce using rule 15 (statement -> whileloop .)
    RETURN          reduce using rule 15 (statement -> whileloop .)
    CONSOLE         reduce using rule 15 (statement -> whileloop .)
    VAR             reduce using rule 15 (statement -> whileloop .)
    ID              reduce using rule 15 (statement -> whileloop .)
    LEFTPAREN       reduce using rule 15 (statement -> whileloop .)
    IF              reduce using rule 15 (statement -> whileloop .)
    WHILE           reduce using rule 15 (statement -> whileloop .)
    FUNCTION        reduce using rule 15 (statement -> whileloop .)
    FOR             reduce using rule 15 (statement -> whileloop .)
    $end            reduce using rule 15 (statement -> whileloop .)
    RIGHTBRACE      reduce using rule 15 (statement -> whileloop .)


state 6

    (9) statement -> reassignment . SEMICOLON

    SEMICOLON       shift and go to state 43


state 7

    (98) forloop -> FOR . scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker
    (99) scope_marker -> .

    LEFTPAREN       reduce using rule 99 (scope_marker -> .)

    scope_marker                   shift and go to state 44

state 8

    (12) statement -> funcstmt . SEMICOLON

    SEMICOLON       shift and go to state 45


state 9

    (76) reassignmentarray -> arrayCall . EQ expression

    EQ              shift and go to state 46


state 10

    (0) S' -> start .



state 11

    (18) statement -> reassignmentarray . SEMICOLON

    SEMICOLON       shift and go to state 47


state 12

    (14) statement -> ifelse .

    BREAK           reduce using rule 14 (statement -> ifelse .)
    CONTINUE        reduce using rule 14 (statement -> ifelse .)
    RETURN          reduce using rule 14 (statement -> ifelse .)
    CONSOLE         reduce using rule 14 (statement -> ifelse .)
    VAR             reduce using rule 14 (statement -> ifelse .)
    ID              reduce using rule 14 (statement -> ifelse .)
    LEFTPAREN       reduce using rule 14 (statement -> ifelse .)
    IF              reduce using rule 14 (statement -> ifelse .)
    WHILE           reduce using rule 14 (statement -> ifelse .)
    FUNCTION        reduce using rule 14 (statement -> ifelse .)
    FOR             reduce using rule 14 (statement -> ifelse .)
    $end            reduce using rule 14 (statement -> ifelse .)
    RIGHTBRACE      reduce using rule 14 (statement -> ifelse .)


state 13

    (5) statements -> statement . statements
    (6) statements -> statement .
    (5) statements -> . statement statements
    (6) statements -> . statement
    (7) statement -> . assignment SEMICOLON
    (8) statement -> . declaration SEMICOLON
    (9) statement -> . reassignment SEMICOLON
    (10) statement -> . BREAK SEMICOLON
    (11) statement -> . CONTINUE SEMICOLON
    (12) statement -> . funcstmt SEMICOLON
    (13) statement -> . if
    (14) statement -> . ifelse
    (15) statement -> . whileloop
    (16) statement -> . funcdecl
    (17) statement -> . forloop
    (18) statement -> . reassignmentarray SEMICOLON
    (19) statement -> . RETURN expression SEMICOLON
    (20) statement -> . CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON
    (26) assignment -> . VAR assignlist
    (23) declaration -> . VAR declarationList
    (30) reassignment -> . ID EQ expression
    (31) reassignment -> . ID PLUSEQ expression
    (32) reassignment -> . ID MINUSEQ expression
    (33) reassignment -> . ID INTOEQ expression
    (34) reassignment -> . ID DIVEQ expression
    (35) reassignment -> . ID INCR
    (36) reassignment -> . ID DECR
    (37) reassignment -> . ID LSHIFTEQ expression
    (38) reassignment -> . ID RSHIFTEQ expression
    (39) reassignment -> . ID URSHIFTEQ expression
    (40) reassignment -> . ID ANDEQ expression
    (41) reassignment -> . ID OREQ expression
    (42) reassignment -> . ID XOREQ expression
    (43) reassignment -> . ID MODEQ expression
    (44) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (72) funcstmt -> . ID EQ functioncall
    (73) funcstmt -> . functioncall
    (74) funcstmt -> . VAR ID EQ functioncall
    (88) if -> . IF expression ifelseblock block ifblockend
    (90) ifelse -> . IF expression ifelseblock block ELSE elseblock block elseblockend
    (94) whileloop -> . WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend
    (116) funcdecl -> . FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc
    (119) funcdecl -> . VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl
    (98) forloop -> . FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker
    (76) reassignmentarray -> . arrayCall EQ expression
    (84) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (77) arrayCall -> . ID reference

    RIGHTBRACE      reduce using rule 6 (statements -> statement .)
    $end            reduce using rule 6 (statements -> statement .)
    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 3
    CONSOLE         shift and go to state 17
    VAR             shift and go to state 21
    ID              shift and go to state 22
    LEFTPAREN       shift and go to state 19
    IF              shift and go to state 14
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 15
    FOR             shift and go to state 7

    statements                     shift and go to state 48
    if                             shift and go to state 4
    whileloop                      shift and go to state 5
    funcstmt                       shift and go to state 8
    arrayCall                      shift and go to state 9
    reassignmentarray              shift and go to state 11
    ifelse                         shift and go to state 12
    statement                      shift and go to state 13
    forloop                        shift and go to state 16
    assignment                     shift and go to state 18
    declaration                    shift and go to state 20
    funcdecl                       shift and go to state 24
    reassignment                   shift and go to state 6
    functioncall                   shift and go to state 27

state 14

    (88) if -> IF . expression ifelseblock block ifblockend
    (90) ifelse -> IF . expression ifelseblock block ELSE elseblock block elseblockend
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 49
    basicTypes                     shift and go to state 41

state 15

    (116) funcdecl -> FUNCTION . ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc

    ID              shift and go to state 50


state 16

    (17) statement -> forloop .

    BREAK           reduce using rule 17 (statement -> forloop .)
    CONTINUE        reduce using rule 17 (statement -> forloop .)
    RETURN          reduce using rule 17 (statement -> forloop .)
    CONSOLE         reduce using rule 17 (statement -> forloop .)
    VAR             reduce using rule 17 (statement -> forloop .)
    ID              reduce using rule 17 (statement -> forloop .)
    LEFTPAREN       reduce using rule 17 (statement -> forloop .)
    IF              reduce using rule 17 (statement -> forloop .)
    WHILE           reduce using rule 17 (statement -> forloop .)
    FUNCTION        reduce using rule 17 (statement -> forloop .)
    FOR             reduce using rule 17 (statement -> forloop .)
    $end            reduce using rule 17 (statement -> forloop .)
    RIGHTBRACE      reduce using rule 17 (statement -> forloop .)


state 17

    (20) statement -> CONSOLE . DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON

    DOT             shift and go to state 51


state 18

    (7) statement -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 52


state 19

    (44) reassignment -> LEFTPAREN . reassignment RIGHTPAREN
    (30) reassignment -> . ID EQ expression
    (31) reassignment -> . ID PLUSEQ expression
    (32) reassignment -> . ID MINUSEQ expression
    (33) reassignment -> . ID INTOEQ expression
    (34) reassignment -> . ID DIVEQ expression
    (35) reassignment -> . ID INCR
    (36) reassignment -> . ID DECR
    (37) reassignment -> . ID LSHIFTEQ expression
    (38) reassignment -> . ID RSHIFTEQ expression
    (39) reassignment -> . ID URSHIFTEQ expression
    (40) reassignment -> . ID ANDEQ expression
    (41) reassignment -> . ID OREQ expression
    (42) reassignment -> . ID XOREQ expression
    (43) reassignment -> . ID MODEQ expression
    (44) reassignment -> . LEFTPAREN reassignment RIGHTPAREN

    ID              shift and go to state 54
    LEFTPAREN       shift and go to state 19

    reassignment                   shift and go to state 53

state 20

    (8) statement -> declaration . SEMICOLON

    SEMICOLON       shift and go to state 55


state 21

    (26) assignment -> VAR . assignlist
    (23) declaration -> VAR . declarationList
    (74) funcstmt -> VAR . ID EQ functioncall
    (119) funcdecl -> VAR . ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl
    (27) assignlist -> . ID EQ expression COMMA assignlist
    (28) assignlist -> . ID EQ expression
    (29) assignlist -> . ID EQ array
    (24) declarationList -> . ID COMMA declarationList
    (25) declarationList -> . ID

    ID              shift and go to state 58

    declarationList                shift and go to state 57
    assignlist                     shift and go to state 56

state 22

    (30) reassignment -> ID . EQ expression
    (31) reassignment -> ID . PLUSEQ expression
    (32) reassignment -> ID . MINUSEQ expression
    (33) reassignment -> ID . INTOEQ expression
    (34) reassignment -> ID . DIVEQ expression
    (35) reassignment -> ID . INCR
    (36) reassignment -> ID . DECR
    (37) reassignment -> ID . LSHIFTEQ expression
    (38) reassignment -> ID . RSHIFTEQ expression
    (39) reassignment -> ID . URSHIFTEQ expression
    (40) reassignment -> ID . ANDEQ expression
    (41) reassignment -> ID . OREQ expression
    (42) reassignment -> ID . XOREQ expression
    (43) reassignment -> ID . MODEQ expression
    (72) funcstmt -> ID . EQ functioncall
    (84) functioncall -> ID . LEFTPAREN argList RIGHTPAREN
    (77) arrayCall -> ID . reference
    (78) reference -> . LEFTBRACKET expression RIGHTBRACKET reference
    (79) reference -> . LEFTBRACKET expression RIGHTBRACKET

    EQ              shift and go to state 73
    PLUSEQ          shift and go to state 75
    MINUSEQ         shift and go to state 66
    INTOEQ          shift and go to state 61
    DIVEQ           shift and go to state 69
    INCR            shift and go to state 63
    DECR            shift and go to state 62
    LSHIFTEQ        shift and go to state 70
    RSHIFTEQ        shift and go to state 74
    URSHIFTEQ       shift and go to state 65
    ANDEQ           shift and go to state 72
    OREQ            shift and go to state 68
    XOREQ           shift and go to state 64
    MODEQ           shift and go to state 60
    LEFTPAREN       shift and go to state 71
    LEFTBRACKET     shift and go to state 67

    reference                      shift and go to state 59

state 23

    (3) block -> LEFTBRACE . blockmarker statements RIGHTBRACE
    (4) blockmarker -> .

    BREAK           reduce using rule 4 (blockmarker -> .)
    CONTINUE        reduce using rule 4 (blockmarker -> .)
    RETURN          reduce using rule 4 (blockmarker -> .)
    CONSOLE         reduce using rule 4 (blockmarker -> .)
    VAR             reduce using rule 4 (blockmarker -> .)
    ID              reduce using rule 4 (blockmarker -> .)
    LEFTPAREN       reduce using rule 4 (blockmarker -> .)
    IF              reduce using rule 4 (blockmarker -> .)
    WHILE           reduce using rule 4 (blockmarker -> .)
    FUNCTION        reduce using rule 4 (blockmarker -> .)
    FOR             reduce using rule 4 (blockmarker -> .)

    blockmarker                    shift and go to state 76

state 24

    (16) statement -> funcdecl .

    BREAK           reduce using rule 16 (statement -> funcdecl .)
    CONTINUE        reduce using rule 16 (statement -> funcdecl .)
    RETURN          reduce using rule 16 (statement -> funcdecl .)
    CONSOLE         reduce using rule 16 (statement -> funcdecl .)
    VAR             reduce using rule 16 (statement -> funcdecl .)
    ID              reduce using rule 16 (statement -> funcdecl .)
    LEFTPAREN       reduce using rule 16 (statement -> funcdecl .)
    IF              reduce using rule 16 (statement -> funcdecl .)
    WHILE           reduce using rule 16 (statement -> funcdecl .)
    FUNCTION        reduce using rule 16 (statement -> funcdecl .)
    FOR             reduce using rule 16 (statement -> funcdecl .)
    $end            reduce using rule 16 (statement -> funcdecl .)
    RIGHTBRACE      reduce using rule 16 (statement -> funcdecl .)


state 25

    (10) statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 77


state 26

    (11) statement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 78


state 27

    (73) funcstmt -> functioncall .

    SEMICOLON       reduce using rule 73 (funcstmt -> functioncall .)


state 28

    (1) start -> block .

    $end            reduce using rule 1 (start -> block .)


state 29

    (94) whileloop -> WHILE whileblockstart . LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend

    LEFTPAREN       shift and go to state 79


state 30

    (95) whileblockstart -> empty .

    LEFTPAREN       reduce using rule 95 (whileblockstart -> empty .)


state 31

    (83) basicTypes -> UNDEFINED .

    PLUS            reduce using rule 83 (basicTypes -> UNDEFINED .)
    MINUS           reduce using rule 83 (basicTypes -> UNDEFINED .)
    INTO            reduce using rule 83 (basicTypes -> UNDEFINED .)
    DIVIDE          reduce using rule 83 (basicTypes -> UNDEFINED .)
    MOD             reduce using rule 83 (basicTypes -> UNDEFINED .)
    BINAND          reduce using rule 83 (basicTypes -> UNDEFINED .)
    BINOR           reduce using rule 83 (basicTypes -> UNDEFINED .)
    BINXOR          reduce using rule 83 (basicTypes -> UNDEFINED .)
    LT              reduce using rule 83 (basicTypes -> UNDEFINED .)
    GT              reduce using rule 83 (basicTypes -> UNDEFINED .)
    DOUBLEEQ        reduce using rule 83 (basicTypes -> UNDEFINED .)
    NOTEQUAL        reduce using rule 83 (basicTypes -> UNDEFINED .)
    LTE             reduce using rule 83 (basicTypes -> UNDEFINED .)
    GTE             reduce using rule 83 (basicTypes -> UNDEFINED .)
    STREQUAL        reduce using rule 83 (basicTypes -> UNDEFINED .)
    STRNEQUAL       reduce using rule 83 (basicTypes -> UNDEFINED .)
    SEMICOLON       reduce using rule 83 (basicTypes -> UNDEFINED .)
    LEFTBRACE       reduce using rule 83 (basicTypes -> UNDEFINED .)
    RIGHTPAREN      reduce using rule 83 (basicTypes -> UNDEFINED .)
    COMMA           reduce using rule 83 (basicTypes -> UNDEFINED .)
    RIGHTBRACKET    reduce using rule 83 (basicTypes -> UNDEFINED .)


state 32

    (80) basicTypes -> NUMBER .

    PLUS            reduce using rule 80 (basicTypes -> NUMBER .)
    MINUS           reduce using rule 80 (basicTypes -> NUMBER .)
    INTO            reduce using rule 80 (basicTypes -> NUMBER .)
    DIVIDE          reduce using rule 80 (basicTypes -> NUMBER .)
    MOD             reduce using rule 80 (basicTypes -> NUMBER .)
    BINAND          reduce using rule 80 (basicTypes -> NUMBER .)
    BINOR           reduce using rule 80 (basicTypes -> NUMBER .)
    BINXOR          reduce using rule 80 (basicTypes -> NUMBER .)
    LT              reduce using rule 80 (basicTypes -> NUMBER .)
    GT              reduce using rule 80 (basicTypes -> NUMBER .)
    DOUBLEEQ        reduce using rule 80 (basicTypes -> NUMBER .)
    NOTEQUAL        reduce using rule 80 (basicTypes -> NUMBER .)
    LTE             reduce using rule 80 (basicTypes -> NUMBER .)
    GTE             reduce using rule 80 (basicTypes -> NUMBER .)
    STREQUAL        reduce using rule 80 (basicTypes -> NUMBER .)
    STRNEQUAL       reduce using rule 80 (basicTypes -> NUMBER .)
    SEMICOLON       reduce using rule 80 (basicTypes -> NUMBER .)
    LEFTBRACE       reduce using rule 80 (basicTypes -> NUMBER .)
    RIGHTPAREN      reduce using rule 80 (basicTypes -> NUMBER .)
    COMMA           reduce using rule 80 (basicTypes -> NUMBER .)
    RIGHTBRACKET    reduce using rule 80 (basicTypes -> NUMBER .)


state 33

    (75) expression -> arrayCall .

    PLUS            reduce using rule 75 (expression -> arrayCall .)
    MINUS           reduce using rule 75 (expression -> arrayCall .)
    INTO            reduce using rule 75 (expression -> arrayCall .)
    DIVIDE          reduce using rule 75 (expression -> arrayCall .)
    MOD             reduce using rule 75 (expression -> arrayCall .)
    BINAND          reduce using rule 75 (expression -> arrayCall .)
    BINOR           reduce using rule 75 (expression -> arrayCall .)
    BINXOR          reduce using rule 75 (expression -> arrayCall .)
    LT              reduce using rule 75 (expression -> arrayCall .)
    GT              reduce using rule 75 (expression -> arrayCall .)
    DOUBLEEQ        reduce using rule 75 (expression -> arrayCall .)
    NOTEQUAL        reduce using rule 75 (expression -> arrayCall .)
    LTE             reduce using rule 75 (expression -> arrayCall .)
    GTE             reduce using rule 75 (expression -> arrayCall .)
    STREQUAL        reduce using rule 75 (expression -> arrayCall .)
    STRNEQUAL       reduce using rule 75 (expression -> arrayCall .)
    SEMICOLON       reduce using rule 75 (expression -> arrayCall .)
    RIGHTPAREN      reduce using rule 75 (expression -> arrayCall .)
    COMMA           reduce using rule 75 (expression -> arrayCall .)
    LEFTBRACE       reduce using rule 75 (expression -> arrayCall .)
    RIGHTBRACKET    reduce using rule 75 (expression -> arrayCall .)


state 34

    (82) basicTypes -> STRING .

    PLUS            reduce using rule 82 (basicTypes -> STRING .)
    MINUS           reduce using rule 82 (basicTypes -> STRING .)
    INTO            reduce using rule 82 (basicTypes -> STRING .)
    DIVIDE          reduce using rule 82 (basicTypes -> STRING .)
    MOD             reduce using rule 82 (basicTypes -> STRING .)
    BINAND          reduce using rule 82 (basicTypes -> STRING .)
    BINOR           reduce using rule 82 (basicTypes -> STRING .)
    BINXOR          reduce using rule 82 (basicTypes -> STRING .)
    LT              reduce using rule 82 (basicTypes -> STRING .)
    GT              reduce using rule 82 (basicTypes -> STRING .)
    DOUBLEEQ        reduce using rule 82 (basicTypes -> STRING .)
    NOTEQUAL        reduce using rule 82 (basicTypes -> STRING .)
    LTE             reduce using rule 82 (basicTypes -> STRING .)
    GTE             reduce using rule 82 (basicTypes -> STRING .)
    STREQUAL        reduce using rule 82 (basicTypes -> STRING .)
    STRNEQUAL       reduce using rule 82 (basicTypes -> STRING .)
    SEMICOLON       reduce using rule 82 (basicTypes -> STRING .)
    LEFTBRACE       reduce using rule 82 (basicTypes -> STRING .)
    RIGHTPAREN      reduce using rule 82 (basicTypes -> STRING .)
    COMMA           reduce using rule 82 (basicTypes -> STRING .)
    RIGHTBRACKET    reduce using rule 82 (basicTypes -> STRING .)


state 35

    (55) expression -> LEFTPAREN . expression RIGHTPAREN
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 80
    basicTypes                     shift and go to state 41

state 36

    (70) expression -> ID .
    (77) arrayCall -> ID . reference
    (78) reference -> . LEFTBRACKET expression RIGHTBRACKET reference
    (79) reference -> . LEFTBRACKET expression RIGHTBRACKET

    PLUS            reduce using rule 70 (expression -> ID .)
    MINUS           reduce using rule 70 (expression -> ID .)
    INTO            reduce using rule 70 (expression -> ID .)
    DIVIDE          reduce using rule 70 (expression -> ID .)
    MOD             reduce using rule 70 (expression -> ID .)
    BINAND          reduce using rule 70 (expression -> ID .)
    BINOR           reduce using rule 70 (expression -> ID .)
    BINXOR          reduce using rule 70 (expression -> ID .)
    LT              reduce using rule 70 (expression -> ID .)
    GT              reduce using rule 70 (expression -> ID .)
    DOUBLEEQ        reduce using rule 70 (expression -> ID .)
    NOTEQUAL        reduce using rule 70 (expression -> ID .)
    LTE             reduce using rule 70 (expression -> ID .)
    GTE             reduce using rule 70 (expression -> ID .)
    STREQUAL        reduce using rule 70 (expression -> ID .)
    STRNEQUAL       reduce using rule 70 (expression -> ID .)
    SEMICOLON       reduce using rule 70 (expression -> ID .)
    RIGHTPAREN      reduce using rule 70 (expression -> ID .)
    COMMA           reduce using rule 70 (expression -> ID .)
    LEFTBRACE       reduce using rule 70 (expression -> ID .)
    RIGHTBRACKET    reduce using rule 70 (expression -> ID .)
    LEFTBRACKET     shift and go to state 67

    reference                      shift and go to state 59

state 37

    (19) statement -> RETURN expression . SEMICOLON
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    SEMICOLON       shift and go to state 85
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    BINAND          shift and go to state 81
    BINOR           shift and go to state 94
    BINXOR          shift and go to state 82
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89


state 38

    (81) basicTypes -> BOOLEAN .

    PLUS            reduce using rule 81 (basicTypes -> BOOLEAN .)
    MINUS           reduce using rule 81 (basicTypes -> BOOLEAN .)
    INTO            reduce using rule 81 (basicTypes -> BOOLEAN .)
    DIVIDE          reduce using rule 81 (basicTypes -> BOOLEAN .)
    MOD             reduce using rule 81 (basicTypes -> BOOLEAN .)
    BINAND          reduce using rule 81 (basicTypes -> BOOLEAN .)
    BINOR           reduce using rule 81 (basicTypes -> BOOLEAN .)
    BINXOR          reduce using rule 81 (basicTypes -> BOOLEAN .)
    LT              reduce using rule 81 (basicTypes -> BOOLEAN .)
    GT              reduce using rule 81 (basicTypes -> BOOLEAN .)
    DOUBLEEQ        reduce using rule 81 (basicTypes -> BOOLEAN .)
    NOTEQUAL        reduce using rule 81 (basicTypes -> BOOLEAN .)
    LTE             reduce using rule 81 (basicTypes -> BOOLEAN .)
    GTE             reduce using rule 81 (basicTypes -> BOOLEAN .)
    STREQUAL        reduce using rule 81 (basicTypes -> BOOLEAN .)
    STRNEQUAL       reduce using rule 81 (basicTypes -> BOOLEAN .)
    SEMICOLON       reduce using rule 81 (basicTypes -> BOOLEAN .)
    LEFTBRACE       reduce using rule 81 (basicTypes -> BOOLEAN .)
    RIGHTPAREN      reduce using rule 81 (basicTypes -> BOOLEAN .)
    COMMA           reduce using rule 81 (basicTypes -> BOOLEAN .)
    RIGHTBRACKET    reduce using rule 81 (basicTypes -> BOOLEAN .)


state 39

    (71) expression -> TYPEOF . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 98
    basicTypes                     shift and go to state 41

state 40

    (56) expression -> NOT . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 99
    basicTypes                     shift and go to state 41

state 41

    (69) expression -> basicTypes .

    PLUS            reduce using rule 69 (expression -> basicTypes .)
    MINUS           reduce using rule 69 (expression -> basicTypes .)
    INTO            reduce using rule 69 (expression -> basicTypes .)
    DIVIDE          reduce using rule 69 (expression -> basicTypes .)
    MOD             reduce using rule 69 (expression -> basicTypes .)
    BINAND          reduce using rule 69 (expression -> basicTypes .)
    BINOR           reduce using rule 69 (expression -> basicTypes .)
    BINXOR          reduce using rule 69 (expression -> basicTypes .)
    LT              reduce using rule 69 (expression -> basicTypes .)
    GT              reduce using rule 69 (expression -> basicTypes .)
    DOUBLEEQ        reduce using rule 69 (expression -> basicTypes .)
    NOTEQUAL        reduce using rule 69 (expression -> basicTypes .)
    LTE             reduce using rule 69 (expression -> basicTypes .)
    GTE             reduce using rule 69 (expression -> basicTypes .)
    STREQUAL        reduce using rule 69 (expression -> basicTypes .)
    STRNEQUAL       reduce using rule 69 (expression -> basicTypes .)
    SEMICOLON       reduce using rule 69 (expression -> basicTypes .)
    RIGHTPAREN      reduce using rule 69 (expression -> basicTypes .)
    COMMA           reduce using rule 69 (expression -> basicTypes .)
    LEFTBRACE       reduce using rule 69 (expression -> basicTypes .)
    RIGHTBRACKET    reduce using rule 69 (expression -> basicTypes .)


state 42

    (60) expression -> BINNOT . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 100
    basicTypes                     shift and go to state 41

state 43

    (9) statement -> reassignment SEMICOLON .

    BREAK           reduce using rule 9 (statement -> reassignment SEMICOLON .)
    CONTINUE        reduce using rule 9 (statement -> reassignment SEMICOLON .)
    RETURN          reduce using rule 9 (statement -> reassignment SEMICOLON .)
    CONSOLE         reduce using rule 9 (statement -> reassignment SEMICOLON .)
    VAR             reduce using rule 9 (statement -> reassignment SEMICOLON .)
    ID              reduce using rule 9 (statement -> reassignment SEMICOLON .)
    LEFTPAREN       reduce using rule 9 (statement -> reassignment SEMICOLON .)
    IF              reduce using rule 9 (statement -> reassignment SEMICOLON .)
    WHILE           reduce using rule 9 (statement -> reassignment SEMICOLON .)
    FUNCTION        reduce using rule 9 (statement -> reassignment SEMICOLON .)
    FOR             reduce using rule 9 (statement -> reassignment SEMICOLON .)
    $end            reduce using rule 9 (statement -> reassignment SEMICOLON .)
    RIGHTBRACE      reduce using rule 9 (statement -> reassignment SEMICOLON .)


state 44

    (98) forloop -> FOR scope_marker . LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker

    LEFTPAREN       shift and go to state 101


state 45

    (12) statement -> funcstmt SEMICOLON .

    BREAK           reduce using rule 12 (statement -> funcstmt SEMICOLON .)
    CONTINUE        reduce using rule 12 (statement -> funcstmt SEMICOLON .)
    RETURN          reduce using rule 12 (statement -> funcstmt SEMICOLON .)
    CONSOLE         reduce using rule 12 (statement -> funcstmt SEMICOLON .)
    VAR             reduce using rule 12 (statement -> funcstmt SEMICOLON .)
    ID              reduce using rule 12 (statement -> funcstmt SEMICOLON .)
    LEFTPAREN       reduce using rule 12 (statement -> funcstmt SEMICOLON .)
    IF              reduce using rule 12 (statement -> funcstmt SEMICOLON .)
    WHILE           reduce using rule 12 (statement -> funcstmt SEMICOLON .)
    FUNCTION        reduce using rule 12 (statement -> funcstmt SEMICOLON .)
    FOR             reduce using rule 12 (statement -> funcstmt SEMICOLON .)
    $end            reduce using rule 12 (statement -> funcstmt SEMICOLON .)
    RIGHTBRACE      reduce using rule 12 (statement -> funcstmt SEMICOLON .)


state 46

    (76) reassignmentarray -> arrayCall EQ . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 102
    basicTypes                     shift and go to state 41

state 47

    (18) statement -> reassignmentarray SEMICOLON .

    BREAK           reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)
    CONTINUE        reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)
    RETURN          reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)
    CONSOLE         reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)
    VAR             reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)
    ID              reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)
    LEFTPAREN       reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)
    IF              reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)
    WHILE           reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)
    FUNCTION        reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)
    FOR             reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)
    $end            reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)
    RIGHTBRACE      reduce using rule 18 (statement -> reassignmentarray SEMICOLON .)


state 48

    (5) statements -> statement statements .

    RIGHTBRACE      reduce using rule 5 (statements -> statement statements .)
    $end            reduce using rule 5 (statements -> statement statements .)


state 49

    (88) if -> IF expression . ifelseblock block ifblockend
    (90) ifelse -> IF expression . ifelseblock block ELSE elseblock block elseblockend
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression
    (91) ifelseblock -> .

    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    BINAND          shift and go to state 81
    BINOR           shift and go to state 94
    BINXOR          shift and go to state 82
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89
    LEFTBRACE       reduce using rule 91 (ifelseblock -> .)

    ifelseblock                    shift and go to state 103

state 50

    (116) funcdecl -> FUNCTION ID . funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc
    (117) funcscopedefnormal -> .

    LEFTPAREN       reduce using rule 117 (funcscopedefnormal -> .)

    funcscopedefnormal             shift and go to state 104

state 51

    (20) statement -> CONSOLE DOT . LOG LEFTPAREN printList RIGHTPAREN SEMICOLON

    LOG             shift and go to state 105


state 52

    (7) statement -> assignment SEMICOLON .

    BREAK           reduce using rule 7 (statement -> assignment SEMICOLON .)
    CONTINUE        reduce using rule 7 (statement -> assignment SEMICOLON .)
    RETURN          reduce using rule 7 (statement -> assignment SEMICOLON .)
    CONSOLE         reduce using rule 7 (statement -> assignment SEMICOLON .)
    VAR             reduce using rule 7 (statement -> assignment SEMICOLON .)
    ID              reduce using rule 7 (statement -> assignment SEMICOLON .)
    LEFTPAREN       reduce using rule 7 (statement -> assignment SEMICOLON .)
    IF              reduce using rule 7 (statement -> assignment SEMICOLON .)
    WHILE           reduce using rule 7 (statement -> assignment SEMICOLON .)
    FUNCTION        reduce using rule 7 (statement -> assignment SEMICOLON .)
    FOR             reduce using rule 7 (statement -> assignment SEMICOLON .)
    $end            reduce using rule 7 (statement -> assignment SEMICOLON .)
    RIGHTBRACE      reduce using rule 7 (statement -> assignment SEMICOLON .)


state 53

    (44) reassignment -> LEFTPAREN reassignment . RIGHTPAREN

    RIGHTPAREN      shift and go to state 106


state 54

    (30) reassignment -> ID . EQ expression
    (31) reassignment -> ID . PLUSEQ expression
    (32) reassignment -> ID . MINUSEQ expression
    (33) reassignment -> ID . INTOEQ expression
    (34) reassignment -> ID . DIVEQ expression
    (35) reassignment -> ID . INCR
    (36) reassignment -> ID . DECR
    (37) reassignment -> ID . LSHIFTEQ expression
    (38) reassignment -> ID . RSHIFTEQ expression
    (39) reassignment -> ID . URSHIFTEQ expression
    (40) reassignment -> ID . ANDEQ expression
    (41) reassignment -> ID . OREQ expression
    (42) reassignment -> ID . XOREQ expression
    (43) reassignment -> ID . MODEQ expression

    EQ              shift and go to state 107
    PLUSEQ          shift and go to state 75
    MINUSEQ         shift and go to state 66
    INTOEQ          shift and go to state 61
    DIVEQ           shift and go to state 69
    INCR            shift and go to state 63
    DECR            shift and go to state 62
    LSHIFTEQ        shift and go to state 70
    RSHIFTEQ        shift and go to state 74
    URSHIFTEQ       shift and go to state 65
    ANDEQ           shift and go to state 72
    OREQ            shift and go to state 68
    XOREQ           shift and go to state 64
    MODEQ           shift and go to state 60


state 55

    (8) statement -> declaration SEMICOLON .

    BREAK           reduce using rule 8 (statement -> declaration SEMICOLON .)
    CONTINUE        reduce using rule 8 (statement -> declaration SEMICOLON .)
    RETURN          reduce using rule 8 (statement -> declaration SEMICOLON .)
    CONSOLE         reduce using rule 8 (statement -> declaration SEMICOLON .)
    VAR             reduce using rule 8 (statement -> declaration SEMICOLON .)
    ID              reduce using rule 8 (statement -> declaration SEMICOLON .)
    LEFTPAREN       reduce using rule 8 (statement -> declaration SEMICOLON .)
    IF              reduce using rule 8 (statement -> declaration SEMICOLON .)
    WHILE           reduce using rule 8 (statement -> declaration SEMICOLON .)
    FUNCTION        reduce using rule 8 (statement -> declaration SEMICOLON .)
    FOR             reduce using rule 8 (statement -> declaration SEMICOLON .)
    $end            reduce using rule 8 (statement -> declaration SEMICOLON .)
    RIGHTBRACE      reduce using rule 8 (statement -> declaration SEMICOLON .)


state 56

    (26) assignment -> VAR assignlist .

    SEMICOLON       reduce using rule 26 (assignment -> VAR assignlist .)


state 57

    (23) declaration -> VAR declarationList .

    SEMICOLON       reduce using rule 23 (declaration -> VAR declarationList .)


state 58

    (74) funcstmt -> VAR ID . EQ functioncall
    (119) funcdecl -> VAR ID . EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl
    (27) assignlist -> ID . EQ expression COMMA assignlist
    (28) assignlist -> ID . EQ expression
    (29) assignlist -> ID . EQ array
    (24) declarationList -> ID . COMMA declarationList
    (25) declarationList -> ID .

    EQ              shift and go to state 109
    COMMA           shift and go to state 108
    SEMICOLON       reduce using rule 25 (declarationList -> ID .)


state 59

    (77) arrayCall -> ID reference .

    PLUS            reduce using rule 77 (arrayCall -> ID reference .)
    MINUS           reduce using rule 77 (arrayCall -> ID reference .)
    INTO            reduce using rule 77 (arrayCall -> ID reference .)
    DIVIDE          reduce using rule 77 (arrayCall -> ID reference .)
    MOD             reduce using rule 77 (arrayCall -> ID reference .)
    BINAND          reduce using rule 77 (arrayCall -> ID reference .)
    BINOR           reduce using rule 77 (arrayCall -> ID reference .)
    BINXOR          reduce using rule 77 (arrayCall -> ID reference .)
    LT              reduce using rule 77 (arrayCall -> ID reference .)
    GT              reduce using rule 77 (arrayCall -> ID reference .)
    DOUBLEEQ        reduce using rule 77 (arrayCall -> ID reference .)
    NOTEQUAL        reduce using rule 77 (arrayCall -> ID reference .)
    LTE             reduce using rule 77 (arrayCall -> ID reference .)
    GTE             reduce using rule 77 (arrayCall -> ID reference .)
    STREQUAL        reduce using rule 77 (arrayCall -> ID reference .)
    STRNEQUAL       reduce using rule 77 (arrayCall -> ID reference .)
    SEMICOLON       reduce using rule 77 (arrayCall -> ID reference .)
    LEFTBRACE       reduce using rule 77 (arrayCall -> ID reference .)
    RIGHTPAREN      reduce using rule 77 (arrayCall -> ID reference .)
    COMMA           reduce using rule 77 (arrayCall -> ID reference .)
    RIGHTBRACKET    reduce using rule 77 (arrayCall -> ID reference .)
    EQ              reduce using rule 77 (arrayCall -> ID reference .)


state 60

    (43) reassignment -> ID MODEQ . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 110
    basicTypes                     shift and go to state 41

state 61

    (33) reassignment -> ID INTOEQ . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 111
    basicTypes                     shift and go to state 41

state 62

    (36) reassignment -> ID DECR .

    SEMICOLON       reduce using rule 36 (reassignment -> ID DECR .)
    RIGHTPAREN      reduce using rule 36 (reassignment -> ID DECR .)
    COMMA           reduce using rule 36 (reassignment -> ID DECR .)


state 63

    (35) reassignment -> ID INCR .

    SEMICOLON       reduce using rule 35 (reassignment -> ID INCR .)
    RIGHTPAREN      reduce using rule 35 (reassignment -> ID INCR .)
    COMMA           reduce using rule 35 (reassignment -> ID INCR .)


state 64

    (42) reassignment -> ID XOREQ . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 112
    basicTypes                     shift and go to state 41

state 65

    (39) reassignment -> ID URSHIFTEQ . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 113
    basicTypes                     shift and go to state 41

state 66

    (32) reassignment -> ID MINUSEQ . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 114
    basicTypes                     shift and go to state 41

state 67

    (78) reference -> LEFTBRACKET . expression RIGHTBRACKET reference
    (79) reference -> LEFTBRACKET . expression RIGHTBRACKET
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 115
    basicTypes                     shift and go to state 41

state 68

    (41) reassignment -> ID OREQ . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 116
    basicTypes                     shift and go to state 41

state 69

    (34) reassignment -> ID DIVEQ . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 117
    basicTypes                     shift and go to state 41

state 70

    (37) reassignment -> ID LSHIFTEQ . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 118
    basicTypes                     shift and go to state 41

state 71

    (84) functioncall -> ID LEFTPAREN . argList RIGHTPAREN
    (85) argList -> . expression
    (86) argList -> . expression COMMA argList
    (87) argList -> .
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    RIGHTPAREN      reduce using rule 87 (argList -> .)
    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    argList                        shift and go to state 119
    expression                     shift and go to state 120
    basicTypes                     shift and go to state 41

state 72

    (40) reassignment -> ID ANDEQ . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 121
    basicTypes                     shift and go to state 41

state 73

    (30) reassignment -> ID EQ . expression
    (72) funcstmt -> ID EQ . functioncall
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (84) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 122
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    functioncall                   shift and go to state 124
    expression                     shift and go to state 123
    basicTypes                     shift and go to state 41

state 74

    (38) reassignment -> ID RSHIFTEQ . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 125
    basicTypes                     shift and go to state 41

state 75

    (31) reassignment -> ID PLUSEQ . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 126
    basicTypes                     shift and go to state 41

state 76

    (3) block -> LEFTBRACE blockmarker . statements RIGHTBRACE
    (5) statements -> . statement statements
    (6) statements -> . statement
    (7) statement -> . assignment SEMICOLON
    (8) statement -> . declaration SEMICOLON
    (9) statement -> . reassignment SEMICOLON
    (10) statement -> . BREAK SEMICOLON
    (11) statement -> . CONTINUE SEMICOLON
    (12) statement -> . funcstmt SEMICOLON
    (13) statement -> . if
    (14) statement -> . ifelse
    (15) statement -> . whileloop
    (16) statement -> . funcdecl
    (17) statement -> . forloop
    (18) statement -> . reassignmentarray SEMICOLON
    (19) statement -> . RETURN expression SEMICOLON
    (20) statement -> . CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON
    (26) assignment -> . VAR assignlist
    (23) declaration -> . VAR declarationList
    (30) reassignment -> . ID EQ expression
    (31) reassignment -> . ID PLUSEQ expression
    (32) reassignment -> . ID MINUSEQ expression
    (33) reassignment -> . ID INTOEQ expression
    (34) reassignment -> . ID DIVEQ expression
    (35) reassignment -> . ID INCR
    (36) reassignment -> . ID DECR
    (37) reassignment -> . ID LSHIFTEQ expression
    (38) reassignment -> . ID RSHIFTEQ expression
    (39) reassignment -> . ID URSHIFTEQ expression
    (40) reassignment -> . ID ANDEQ expression
    (41) reassignment -> . ID OREQ expression
    (42) reassignment -> . ID XOREQ expression
    (43) reassignment -> . ID MODEQ expression
    (44) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (72) funcstmt -> . ID EQ functioncall
    (73) funcstmt -> . functioncall
    (74) funcstmt -> . VAR ID EQ functioncall
    (88) if -> . IF expression ifelseblock block ifblockend
    (90) ifelse -> . IF expression ifelseblock block ELSE elseblock block elseblockend
    (94) whileloop -> . WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend
    (116) funcdecl -> . FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc
    (119) funcdecl -> . VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl
    (98) forloop -> . FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker
    (76) reassignmentarray -> . arrayCall EQ expression
    (84) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (77) arrayCall -> . ID reference

    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 3
    CONSOLE         shift and go to state 17
    VAR             shift and go to state 21
    ID              shift and go to state 22
    LEFTPAREN       shift and go to state 19
    IF              shift and go to state 14
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 15
    FOR             shift and go to state 7

    statements                     shift and go to state 127
    if                             shift and go to state 4
    whileloop                      shift and go to state 5
    funcstmt                       shift and go to state 8
    arrayCall                      shift and go to state 9
    reassignmentarray              shift and go to state 11
    ifelse                         shift and go to state 12
    statement                      shift and go to state 13
    forloop                        shift and go to state 16
    assignment                     shift and go to state 18
    declaration                    shift and go to state 20
    funcdecl                       shift and go to state 24
    reassignment                   shift and go to state 6
    functioncall                   shift and go to state 27

state 77

    (10) statement -> BREAK SEMICOLON .

    BREAK           reduce using rule 10 (statement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 10 (statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 10 (statement -> BREAK SEMICOLON .)
    CONSOLE         reduce using rule 10 (statement -> BREAK SEMICOLON .)
    VAR             reduce using rule 10 (statement -> BREAK SEMICOLON .)
    ID              reduce using rule 10 (statement -> BREAK SEMICOLON .)
    LEFTPAREN       reduce using rule 10 (statement -> BREAK SEMICOLON .)
    IF              reduce using rule 10 (statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 10 (statement -> BREAK SEMICOLON .)
    FUNCTION        reduce using rule 10 (statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 10 (statement -> BREAK SEMICOLON .)
    $end            reduce using rule 10 (statement -> BREAK SEMICOLON .)
    RIGHTBRACE      reduce using rule 10 (statement -> BREAK SEMICOLON .)


state 78

    (11) statement -> CONTINUE SEMICOLON .

    BREAK           reduce using rule 11 (statement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 11 (statement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 11 (statement -> CONTINUE SEMICOLON .)
    CONSOLE         reduce using rule 11 (statement -> CONTINUE SEMICOLON .)
    VAR             reduce using rule 11 (statement -> CONTINUE SEMICOLON .)
    ID              reduce using rule 11 (statement -> CONTINUE SEMICOLON .)
    LEFTPAREN       reduce using rule 11 (statement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 11 (statement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 11 (statement -> CONTINUE SEMICOLON .)
    FUNCTION        reduce using rule 11 (statement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 11 (statement -> CONTINUE SEMICOLON .)
    $end            reduce using rule 11 (statement -> CONTINUE SEMICOLON .)
    RIGHTBRACE      reduce using rule 11 (statement -> CONTINUE SEMICOLON .)


state 79

    (94) whileloop -> WHILE whileblockstart LEFTPAREN . expression RIGHTPAREN exprcheck block whileblockend
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 128
    basicTypes                     shift and go to state 41

state 80

    (55) expression -> LEFTPAREN expression . RIGHTPAREN
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    RIGHTPAREN      shift and go to state 129
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    BINAND          shift and go to state 81
    BINOR           shift and go to state 94
    BINXOR          shift and go to state 82
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89


state 81

    (57) expression -> expression BINAND . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 130
    basicTypes                     shift and go to state 41

state 82

    (59) expression -> expression BINXOR . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 131
    basicTypes                     shift and go to state 41

state 83

    (62) expression -> expression GT . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 132
    basicTypes                     shift and go to state 41

state 84

    (53) expression -> expression DIVIDE . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 133
    basicTypes                     shift and go to state 41

state 85

    (19) statement -> RETURN expression SEMICOLON .

    BREAK           reduce using rule 19 (statement -> RETURN expression SEMICOLON .)
    CONTINUE        reduce using rule 19 (statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 19 (statement -> RETURN expression SEMICOLON .)
    CONSOLE         reduce using rule 19 (statement -> RETURN expression SEMICOLON .)
    VAR             reduce using rule 19 (statement -> RETURN expression SEMICOLON .)
    ID              reduce using rule 19 (statement -> RETURN expression SEMICOLON .)
    LEFTPAREN       reduce using rule 19 (statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 19 (statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 19 (statement -> RETURN expression SEMICOLON .)
    FUNCTION        reduce using rule 19 (statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 19 (statement -> RETURN expression SEMICOLON .)
    $end            reduce using rule 19 (statement -> RETURN expression SEMICOLON .)
    RIGHTBRACE      reduce using rule 19 (statement -> RETURN expression SEMICOLON .)


state 86

    (63) expression -> expression DOUBLEEQ . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 134
    basicTypes                     shift and go to state 41

state 87

    (52) expression -> expression INTO . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 135
    basicTypes                     shift and go to state 41

state 88

    (66) expression -> expression GTE . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 136
    basicTypes                     shift and go to state 41

state 89

    (68) expression -> expression STRNEQUAL . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 137
    basicTypes                     shift and go to state 41

state 90

    (67) expression -> expression STREQUAL . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 138
    basicTypes                     shift and go to state 41

state 91

    (61) expression -> expression LT . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 139
    basicTypes                     shift and go to state 41

state 92

    (50) expression -> expression PLUS . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 140
    basicTypes                     shift and go to state 41

state 93

    (65) expression -> expression LTE . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 141
    basicTypes                     shift and go to state 41

state 94

    (58) expression -> expression BINOR . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 142
    basicTypes                     shift and go to state 41

state 95

    (64) expression -> expression NOTEQUAL . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 143
    basicTypes                     shift and go to state 41

state 96

    (51) expression -> expression MINUS . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 144
    basicTypes                     shift and go to state 41

state 97

    (54) expression -> expression MOD . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 145
    basicTypes                     shift and go to state 41

state 98

    (71) expression -> TYPEOF expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for INTO resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for BINAND resolved as shift
  ! shift/reduce conflict for BINOR resolved as shift
  ! shift/reduce conflict for BINXOR resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for DOUBLEEQ resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LTE resolved as shift
  ! shift/reduce conflict for GTE resolved as shift
  ! shift/reduce conflict for STREQUAL resolved as shift
  ! shift/reduce conflict for STRNEQUAL resolved as shift
    SEMICOLON       reduce using rule 71 (expression -> TYPEOF expression .)
    RIGHTPAREN      reduce using rule 71 (expression -> TYPEOF expression .)
    COMMA           reduce using rule 71 (expression -> TYPEOF expression .)
    LEFTBRACE       reduce using rule 71 (expression -> TYPEOF expression .)
    RIGHTBRACKET    reduce using rule 71 (expression -> TYPEOF expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    BINAND          shift and go to state 81
    BINOR           shift and go to state 94
    BINXOR          shift and go to state 82
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89

  ! PLUS            [ reduce using rule 71 (expression -> TYPEOF expression .) ]
  ! MINUS           [ reduce using rule 71 (expression -> TYPEOF expression .) ]
  ! INTO            [ reduce using rule 71 (expression -> TYPEOF expression .) ]
  ! DIVIDE          [ reduce using rule 71 (expression -> TYPEOF expression .) ]
  ! MOD             [ reduce using rule 71 (expression -> TYPEOF expression .) ]
  ! BINAND          [ reduce using rule 71 (expression -> TYPEOF expression .) ]
  ! BINOR           [ reduce using rule 71 (expression -> TYPEOF expression .) ]
  ! BINXOR          [ reduce using rule 71 (expression -> TYPEOF expression .) ]
  ! LT              [ reduce using rule 71 (expression -> TYPEOF expression .) ]
  ! GT              [ reduce using rule 71 (expression -> TYPEOF expression .) ]
  ! DOUBLEEQ        [ reduce using rule 71 (expression -> TYPEOF expression .) ]
  ! NOTEQUAL        [ reduce using rule 71 (expression -> TYPEOF expression .) ]
  ! LTE             [ reduce using rule 71 (expression -> TYPEOF expression .) ]
  ! GTE             [ reduce using rule 71 (expression -> TYPEOF expression .) ]
  ! STREQUAL        [ reduce using rule 71 (expression -> TYPEOF expression .) ]
  ! STRNEQUAL       [ reduce using rule 71 (expression -> TYPEOF expression .) ]


state 99

    (56) expression -> NOT expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    PLUS            reduce using rule 56 (expression -> NOT expression .)
    MINUS           reduce using rule 56 (expression -> NOT expression .)
    INTO            reduce using rule 56 (expression -> NOT expression .)
    DIVIDE          reduce using rule 56 (expression -> NOT expression .)
    MOD             reduce using rule 56 (expression -> NOT expression .)
    BINAND          reduce using rule 56 (expression -> NOT expression .)
    BINOR           reduce using rule 56 (expression -> NOT expression .)
    BINXOR          reduce using rule 56 (expression -> NOT expression .)
    LT              reduce using rule 56 (expression -> NOT expression .)
    GT              reduce using rule 56 (expression -> NOT expression .)
    DOUBLEEQ        reduce using rule 56 (expression -> NOT expression .)
    NOTEQUAL        reduce using rule 56 (expression -> NOT expression .)
    LTE             reduce using rule 56 (expression -> NOT expression .)
    GTE             reduce using rule 56 (expression -> NOT expression .)
    STREQUAL        reduce using rule 56 (expression -> NOT expression .)
    STRNEQUAL       reduce using rule 56 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 56 (expression -> NOT expression .)
    RIGHTPAREN      reduce using rule 56 (expression -> NOT expression .)
    COMMA           reduce using rule 56 (expression -> NOT expression .)
    LEFTBRACE       reduce using rule 56 (expression -> NOT expression .)
    RIGHTBRACKET    reduce using rule 56 (expression -> NOT expression .)

  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 96 ]
  ! INTO            [ shift and go to state 87 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! MOD             [ shift and go to state 97 ]
  ! BINAND          [ shift and go to state 81 ]
  ! BINOR           [ shift and go to state 94 ]
  ! BINXOR          [ shift and go to state 82 ]
  ! LT              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 83 ]
  ! DOUBLEEQ        [ shift and go to state 86 ]
  ! NOTEQUAL        [ shift and go to state 95 ]
  ! LTE             [ shift and go to state 93 ]
  ! GTE             [ shift and go to state 88 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 89 ]


state 100

    (60) expression -> BINNOT expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    PLUS            reduce using rule 60 (expression -> BINNOT expression .)
    MINUS           reduce using rule 60 (expression -> BINNOT expression .)
    INTO            reduce using rule 60 (expression -> BINNOT expression .)
    DIVIDE          reduce using rule 60 (expression -> BINNOT expression .)
    MOD             reduce using rule 60 (expression -> BINNOT expression .)
    BINAND          reduce using rule 60 (expression -> BINNOT expression .)
    BINOR           reduce using rule 60 (expression -> BINNOT expression .)
    BINXOR          reduce using rule 60 (expression -> BINNOT expression .)
    LT              reduce using rule 60 (expression -> BINNOT expression .)
    GT              reduce using rule 60 (expression -> BINNOT expression .)
    DOUBLEEQ        reduce using rule 60 (expression -> BINNOT expression .)
    NOTEQUAL        reduce using rule 60 (expression -> BINNOT expression .)
    LTE             reduce using rule 60 (expression -> BINNOT expression .)
    GTE             reduce using rule 60 (expression -> BINNOT expression .)
    STREQUAL        reduce using rule 60 (expression -> BINNOT expression .)
    STRNEQUAL       reduce using rule 60 (expression -> BINNOT expression .)
    SEMICOLON       reduce using rule 60 (expression -> BINNOT expression .)
    RIGHTPAREN      reduce using rule 60 (expression -> BINNOT expression .)
    COMMA           reduce using rule 60 (expression -> BINNOT expression .)
    LEFTBRACE       reduce using rule 60 (expression -> BINNOT expression .)
    RIGHTBRACKET    reduce using rule 60 (expression -> BINNOT expression .)

  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 96 ]
  ! INTO            [ shift and go to state 87 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! MOD             [ shift and go to state 97 ]
  ! BINAND          [ shift and go to state 81 ]
  ! BINOR           [ shift and go to state 94 ]
  ! BINXOR          [ shift and go to state 82 ]
  ! LT              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 83 ]
  ! DOUBLEEQ        [ shift and go to state 86 ]
  ! NOTEQUAL        [ shift and go to state 95 ]
  ! LTE             [ shift and go to state 93 ]
  ! GTE             [ shift and go to state 88 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 89 ]


state 101

    (98) forloop -> FOR scope_marker LEFTPAREN . initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker
    (105) initialization -> . assignment
    (106) initialization -> . reinitialization
    (26) assignment -> . VAR assignlist
    (107) reinitialization -> . reassignment COMMA reinitialization
    (108) reinitialization -> . reassignment
    (30) reassignment -> . ID EQ expression
    (31) reassignment -> . ID PLUSEQ expression
    (32) reassignment -> . ID MINUSEQ expression
    (33) reassignment -> . ID INTOEQ expression
    (34) reassignment -> . ID DIVEQ expression
    (35) reassignment -> . ID INCR
    (36) reassignment -> . ID DECR
    (37) reassignment -> . ID LSHIFTEQ expression
    (38) reassignment -> . ID RSHIFTEQ expression
    (39) reassignment -> . ID URSHIFTEQ expression
    (40) reassignment -> . ID ANDEQ expression
    (41) reassignment -> . ID OREQ expression
    (42) reassignment -> . ID XOREQ expression
    (43) reassignment -> . ID MODEQ expression
    (44) reassignment -> . LEFTPAREN reassignment RIGHTPAREN

    VAR             shift and go to state 148
    ID              shift and go to state 54
    LEFTPAREN       shift and go to state 19

    assignment                     shift and go to state 146
    initialization                 shift and go to state 147
    reinitialization               shift and go to state 149
    reassignment                   shift and go to state 150

state 102

    (76) reassignmentarray -> arrayCall EQ expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    SEMICOLON       reduce using rule 76 (reassignmentarray -> arrayCall EQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    BINAND          shift and go to state 81
    BINOR           shift and go to state 94
    BINXOR          shift and go to state 82
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89


state 103

    (88) if -> IF expression ifelseblock . block ifblockend
    (90) ifelse -> IF expression ifelseblock . block ELSE elseblock block elseblockend
    (3) block -> . LEFTBRACE blockmarker statements RIGHTBRACE

    LEFTBRACE       shift and go to state 23

    block                          shift and go to state 151

state 104

    (116) funcdecl -> FUNCTION ID funcscopedefnormal . LEFTPAREN funcarghead RIGHTPAREN funblock endfunc

    LEFTPAREN       shift and go to state 152


state 105

    (20) statement -> CONSOLE DOT LOG . LEFTPAREN printList RIGHTPAREN SEMICOLON

    LEFTPAREN       shift and go to state 153


state 106

    (44) reassignment -> LEFTPAREN reassignment RIGHTPAREN .

    SEMICOLON       reduce using rule 44 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)
    RIGHTPAREN      reduce using rule 44 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)
    COMMA           reduce using rule 44 (reassignment -> LEFTPAREN reassignment RIGHTPAREN .)


state 107

    (30) reassignment -> ID EQ . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    expression                     shift and go to state 123
    basicTypes                     shift and go to state 41

state 108

    (24) declarationList -> ID COMMA . declarationList
    (24) declarationList -> . ID COMMA declarationList
    (25) declarationList -> . ID

    ID              shift and go to state 155

    declarationList                shift and go to state 154

state 109

    (74) funcstmt -> VAR ID EQ . functioncall
    (119) funcdecl -> VAR ID EQ . FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl
    (27) assignlist -> ID EQ . expression COMMA assignlist
    (28) assignlist -> ID EQ . expression
    (29) assignlist -> ID EQ . array
    (84) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (45) array -> . LEFTBRACKET arrayList RIGHTBRACKET
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    FUNCTION        shift and go to state 158
    ID              shift and go to state 159
    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    TYPEOF          shift and go to state 39
    LEFTBRACKET     shift and go to state 157
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    functioncall                   shift and go to state 160
    expression                     shift and go to state 161
    array                          shift and go to state 156
    basicTypes                     shift and go to state 41

state 110

    (43) reassignment -> ID MODEQ expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    SEMICOLON       reduce using rule 43 (reassignment -> ID MODEQ expression .)
    RIGHTPAREN      reduce using rule 43 (reassignment -> ID MODEQ expression .)
    COMMA           reduce using rule 43 (reassignment -> ID MODEQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    BINAND          shift and go to state 81
    BINOR           shift and go to state 94
    BINXOR          shift and go to state 82
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89


state 111

    (33) reassignment -> ID INTOEQ expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    SEMICOLON       reduce using rule 33 (reassignment -> ID INTOEQ expression .)
    RIGHTPAREN      reduce using rule 33 (reassignment -> ID INTOEQ expression .)
    COMMA           reduce using rule 33 (reassignment -> ID INTOEQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    BINAND          shift and go to state 81
    BINOR           shift and go to state 94
    BINXOR          shift and go to state 82
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89


state 112

    (42) reassignment -> ID XOREQ expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    SEMICOLON       reduce using rule 42 (reassignment -> ID XOREQ expression .)
    RIGHTPAREN      reduce using rule 42 (reassignment -> ID XOREQ expression .)
    COMMA           reduce using rule 42 (reassignment -> ID XOREQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    BINAND          shift and go to state 81
    BINOR           shift and go to state 94
    BINXOR          shift and go to state 82
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89


state 113

    (39) reassignment -> ID URSHIFTEQ expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    SEMICOLON       reduce using rule 39 (reassignment -> ID URSHIFTEQ expression .)
    RIGHTPAREN      reduce using rule 39 (reassignment -> ID URSHIFTEQ expression .)
    COMMA           reduce using rule 39 (reassignment -> ID URSHIFTEQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    BINAND          shift and go to state 81
    BINOR           shift and go to state 94
    BINXOR          shift and go to state 82
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89


state 114

    (32) reassignment -> ID MINUSEQ expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    SEMICOLON       reduce using rule 32 (reassignment -> ID MINUSEQ expression .)
    RIGHTPAREN      reduce using rule 32 (reassignment -> ID MINUSEQ expression .)
    COMMA           reduce using rule 32 (reassignment -> ID MINUSEQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    BINAND          shift and go to state 81
    BINOR           shift and go to state 94
    BINXOR          shift and go to state 82
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89


state 115

    (78) reference -> LEFTBRACKET expression . RIGHTBRACKET reference
    (79) reference -> LEFTBRACKET expression . RIGHTBRACKET
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    RIGHTBRACKET    shift and go to state 162
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    BINAND          shift and go to state 81
    BINOR           shift and go to state 94
    BINXOR          shift and go to state 82
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89


state 116

    (41) reassignment -> ID OREQ expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    SEMICOLON       reduce using rule 41 (reassignment -> ID OREQ expression .)
    RIGHTPAREN      reduce using rule 41 (reassignment -> ID OREQ expression .)
    COMMA           reduce using rule 41 (reassignment -> ID OREQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    BINAND          shift and go to state 81
    BINOR           shift and go to state 94
    BINXOR          shift and go to state 82
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89


state 117

    (34) reassignment -> ID DIVEQ expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    SEMICOLON       reduce using rule 34 (reassignment -> ID DIVEQ expression .)
    RIGHTPAREN      reduce using rule 34 (reassignment -> ID DIVEQ expression .)
    COMMA           reduce using rule 34 (reassignment -> ID DIVEQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    BINAND          shift and go to state 81
    BINOR           shift and go to state 94
    BINXOR          shift and go to state 82
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89


state 118

    (37) reassignment -> ID LSHIFTEQ expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    SEMICOLON       reduce using rule 37 (reassignment -> ID LSHIFTEQ expression .)
    RIGHTPAREN      reduce using rule 37 (reassignment -> ID LSHIFTEQ expression .)
    COMMA           reduce using rule 37 (reassignment -> ID LSHIFTEQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    BINAND          shift and go to state 81
    BINOR           shift and go to state 94
    BINXOR          shift and go to state 82
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89


state 119

    (84) functioncall -> ID LEFTPAREN argList . RIGHTPAREN

    RIGHTPAREN      shift and go to state 163


state 120

    (85) argList -> expression .
    (86) argList -> expression . COMMA argList
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    RIGHTPAREN      reduce using rule 85 (argList -> expression .)
    COMMA           shift and go to state 164
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    BINAND          shift and go to state 81
    BINOR           shift and go to state 94
    BINXOR          shift and go to state 82
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89


state 121

    (40) reassignment -> ID ANDEQ expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    SEMICOLON       reduce using rule 40 (reassignment -> ID ANDEQ expression .)
    RIGHTPAREN      reduce using rule 40 (reassignment -> ID ANDEQ expression .)
    COMMA           reduce using rule 40 (reassignment -> ID ANDEQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    BINAND          shift and go to state 81
    BINOR           shift and go to state 94
    BINXOR          shift and go to state 82
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89


state 122

    (70) expression -> ID .
    (84) functioncall -> ID . LEFTPAREN argList RIGHTPAREN
    (77) arrayCall -> ID . reference
    (78) reference -> . LEFTBRACKET expression RIGHTBRACKET reference
    (79) reference -> . LEFTBRACKET expression RIGHTBRACKET

    PLUS            reduce using rule 70 (expression -> ID .)
    MINUS           reduce using rule 70 (expression -> ID .)
    INTO            reduce using rule 70 (expression -> ID .)
    DIVIDE          reduce using rule 70 (expression -> ID .)
    MOD             reduce using rule 70 (expression -> ID .)
    BINAND          reduce using rule 70 (expression -> ID .)
    BINOR           reduce using rule 70 (expression -> ID .)
    BINXOR          reduce using rule 70 (expression -> ID .)
    LT              reduce using rule 70 (expression -> ID .)
    GT              reduce using rule 70 (expression -> ID .)
    DOUBLEEQ        reduce using rule 70 (expression -> ID .)
    NOTEQUAL        reduce using rule 70 (expression -> ID .)
    LTE             reduce using rule 70 (expression -> ID .)
    GTE             reduce using rule 70 (expression -> ID .)
    STREQUAL        reduce using rule 70 (expression -> ID .)
    STRNEQUAL       reduce using rule 70 (expression -> ID .)
    SEMICOLON       reduce using rule 70 (expression -> ID .)
    LEFTPAREN       shift and go to state 71
    LEFTBRACKET     shift and go to state 67

    reference                      shift and go to state 59

state 123

    (30) reassignment -> ID EQ expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    SEMICOLON       reduce using rule 30 (reassignment -> ID EQ expression .)
    RIGHTPAREN      reduce using rule 30 (reassignment -> ID EQ expression .)
    COMMA           reduce using rule 30 (reassignment -> ID EQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    BINAND          shift and go to state 81
    BINOR           shift and go to state 94
    BINXOR          shift and go to state 82
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89


state 124

    (72) funcstmt -> ID EQ functioncall .

    SEMICOLON       reduce using rule 72 (funcstmt -> ID EQ functioncall .)


state 125

    (38) reassignment -> ID RSHIFTEQ expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    SEMICOLON       reduce using rule 38 (reassignment -> ID RSHIFTEQ expression .)
    RIGHTPAREN      reduce using rule 38 (reassignment -> ID RSHIFTEQ expression .)
    COMMA           reduce using rule 38 (reassignment -> ID RSHIFTEQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    BINAND          shift and go to state 81
    BINOR           shift and go to state 94
    BINXOR          shift and go to state 82
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89


state 126

    (31) reassignment -> ID PLUSEQ expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    SEMICOLON       reduce using rule 31 (reassignment -> ID PLUSEQ expression .)
    RIGHTPAREN      reduce using rule 31 (reassignment -> ID PLUSEQ expression .)
    COMMA           reduce using rule 31 (reassignment -> ID PLUSEQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    BINAND          shift and go to state 81
    BINOR           shift and go to state 94
    BINXOR          shift and go to state 82
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89


state 127

    (3) block -> LEFTBRACE blockmarker statements . RIGHTBRACE

    RIGHTBRACE      shift and go to state 165


state 128

    (94) whileloop -> WHILE whileblockstart LEFTPAREN expression . RIGHTPAREN exprcheck block whileblockend
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    RIGHTPAREN      shift and go to state 166
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    BINAND          shift and go to state 81
    BINOR           shift and go to state 94
    BINXOR          shift and go to state 82
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89


state 129

    (55) expression -> LEFTPAREN expression RIGHTPAREN .

    PLUS            reduce using rule 55 (expression -> LEFTPAREN expression RIGHTPAREN .)
    MINUS           reduce using rule 55 (expression -> LEFTPAREN expression RIGHTPAREN .)
    INTO            reduce using rule 55 (expression -> LEFTPAREN expression RIGHTPAREN .)
    DIVIDE          reduce using rule 55 (expression -> LEFTPAREN expression RIGHTPAREN .)
    MOD             reduce using rule 55 (expression -> LEFTPAREN expression RIGHTPAREN .)
    BINAND          reduce using rule 55 (expression -> LEFTPAREN expression RIGHTPAREN .)
    BINOR           reduce using rule 55 (expression -> LEFTPAREN expression RIGHTPAREN .)
    BINXOR          reduce using rule 55 (expression -> LEFTPAREN expression RIGHTPAREN .)
    LT              reduce using rule 55 (expression -> LEFTPAREN expression RIGHTPAREN .)
    GT              reduce using rule 55 (expression -> LEFTPAREN expression RIGHTPAREN .)
    DOUBLEEQ        reduce using rule 55 (expression -> LEFTPAREN expression RIGHTPAREN .)
    NOTEQUAL        reduce using rule 55 (expression -> LEFTPAREN expression RIGHTPAREN .)
    LTE             reduce using rule 55 (expression -> LEFTPAREN expression RIGHTPAREN .)
    GTE             reduce using rule 55 (expression -> LEFTPAREN expression RIGHTPAREN .)
    STREQUAL        reduce using rule 55 (expression -> LEFTPAREN expression RIGHTPAREN .)
    STRNEQUAL       reduce using rule 55 (expression -> LEFTPAREN expression RIGHTPAREN .)
    SEMICOLON       reduce using rule 55 (expression -> LEFTPAREN expression RIGHTPAREN .)
    RIGHTPAREN      reduce using rule 55 (expression -> LEFTPAREN expression RIGHTPAREN .)
    COMMA           reduce using rule 55 (expression -> LEFTPAREN expression RIGHTPAREN .)
    LEFTBRACE       reduce using rule 55 (expression -> LEFTPAREN expression RIGHTPAREN .)
    RIGHTBRACKET    reduce using rule 55 (expression -> LEFTPAREN expression RIGHTPAREN .)


state 130

    (57) expression -> expression BINAND expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    BINAND          reduce using rule 57 (expression -> expression BINAND expression .)
    BINOR           reduce using rule 57 (expression -> expression BINAND expression .)
    BINXOR          reduce using rule 57 (expression -> expression BINAND expression .)
    SEMICOLON       reduce using rule 57 (expression -> expression BINAND expression .)
    RIGHTPAREN      reduce using rule 57 (expression -> expression BINAND expression .)
    COMMA           reduce using rule 57 (expression -> expression BINAND expression .)
    LEFTBRACE       reduce using rule 57 (expression -> expression BINAND expression .)
    RIGHTBRACKET    reduce using rule 57 (expression -> expression BINAND expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89

  ! PLUS            [ reduce using rule 57 (expression -> expression BINAND expression .) ]
  ! MINUS           [ reduce using rule 57 (expression -> expression BINAND expression .) ]
  ! INTO            [ reduce using rule 57 (expression -> expression BINAND expression .) ]
  ! DIVIDE          [ reduce using rule 57 (expression -> expression BINAND expression .) ]
  ! MOD             [ reduce using rule 57 (expression -> expression BINAND expression .) ]
  ! LT              [ reduce using rule 57 (expression -> expression BINAND expression .) ]
  ! GT              [ reduce using rule 57 (expression -> expression BINAND expression .) ]
  ! DOUBLEEQ        [ reduce using rule 57 (expression -> expression BINAND expression .) ]
  ! NOTEQUAL        [ reduce using rule 57 (expression -> expression BINAND expression .) ]
  ! LTE             [ reduce using rule 57 (expression -> expression BINAND expression .) ]
  ! GTE             [ reduce using rule 57 (expression -> expression BINAND expression .) ]
  ! STREQUAL        [ reduce using rule 57 (expression -> expression BINAND expression .) ]
  ! STRNEQUAL       [ reduce using rule 57 (expression -> expression BINAND expression .) ]
  ! BINAND          [ shift and go to state 81 ]
  ! BINOR           [ shift and go to state 94 ]
  ! BINXOR          [ shift and go to state 82 ]


state 131

    (59) expression -> expression BINXOR expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    BINOR           reduce using rule 59 (expression -> expression BINXOR expression .)
    BINXOR          reduce using rule 59 (expression -> expression BINXOR expression .)
    SEMICOLON       reduce using rule 59 (expression -> expression BINXOR expression .)
    RIGHTPAREN      reduce using rule 59 (expression -> expression BINXOR expression .)
    COMMA           reduce using rule 59 (expression -> expression BINXOR expression .)
    LEFTBRACE       reduce using rule 59 (expression -> expression BINXOR expression .)
    RIGHTBRACKET    reduce using rule 59 (expression -> expression BINXOR expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    BINAND          shift and go to state 81
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89

  ! PLUS            [ reduce using rule 59 (expression -> expression BINXOR expression .) ]
  ! MINUS           [ reduce using rule 59 (expression -> expression BINXOR expression .) ]
  ! INTO            [ reduce using rule 59 (expression -> expression BINXOR expression .) ]
  ! DIVIDE          [ reduce using rule 59 (expression -> expression BINXOR expression .) ]
  ! MOD             [ reduce using rule 59 (expression -> expression BINXOR expression .) ]
  ! BINAND          [ reduce using rule 59 (expression -> expression BINXOR expression .) ]
  ! LT              [ reduce using rule 59 (expression -> expression BINXOR expression .) ]
  ! GT              [ reduce using rule 59 (expression -> expression BINXOR expression .) ]
  ! DOUBLEEQ        [ reduce using rule 59 (expression -> expression BINXOR expression .) ]
  ! NOTEQUAL        [ reduce using rule 59 (expression -> expression BINXOR expression .) ]
  ! LTE             [ reduce using rule 59 (expression -> expression BINXOR expression .) ]
  ! GTE             [ reduce using rule 59 (expression -> expression BINXOR expression .) ]
  ! STREQUAL        [ reduce using rule 59 (expression -> expression BINXOR expression .) ]
  ! STRNEQUAL       [ reduce using rule 59 (expression -> expression BINXOR expression .) ]
  ! BINOR           [ shift and go to state 94 ]
  ! BINXOR          [ shift and go to state 82 ]


state 132

    (62) expression -> expression GT expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    BINAND          reduce using rule 62 (expression -> expression GT expression .)
    BINOR           reduce using rule 62 (expression -> expression GT expression .)
    BINXOR          reduce using rule 62 (expression -> expression GT expression .)
    LT              reduce using rule 62 (expression -> expression GT expression .)
    GT              reduce using rule 62 (expression -> expression GT expression .)
    DOUBLEEQ        reduce using rule 62 (expression -> expression GT expression .)
    NOTEQUAL        reduce using rule 62 (expression -> expression GT expression .)
    LTE             reduce using rule 62 (expression -> expression GT expression .)
    GTE             reduce using rule 62 (expression -> expression GT expression .)
    STREQUAL        reduce using rule 62 (expression -> expression GT expression .)
    STRNEQUAL       reduce using rule 62 (expression -> expression GT expression .)
    SEMICOLON       reduce using rule 62 (expression -> expression GT expression .)
    RIGHTPAREN      reduce using rule 62 (expression -> expression GT expression .)
    COMMA           reduce using rule 62 (expression -> expression GT expression .)
    LEFTBRACE       reduce using rule 62 (expression -> expression GT expression .)
    RIGHTBRACKET    reduce using rule 62 (expression -> expression GT expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97

  ! PLUS            [ reduce using rule 62 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 62 (expression -> expression GT expression .) ]
  ! INTO            [ reduce using rule 62 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 62 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 62 (expression -> expression GT expression .) ]
  ! BINAND          [ shift and go to state 81 ]
  ! BINOR           [ shift and go to state 94 ]
  ! BINXOR          [ shift and go to state 82 ]
  ! LT              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 83 ]
  ! DOUBLEEQ        [ shift and go to state 86 ]
  ! NOTEQUAL        [ shift and go to state 95 ]
  ! LTE             [ shift and go to state 93 ]
  ! GTE             [ shift and go to state 88 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 89 ]


state 133

    (53) expression -> expression DIVIDE expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    PLUS            reduce using rule 53 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 53 (expression -> expression DIVIDE expression .)
    INTO            reduce using rule 53 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 53 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 53 (expression -> expression DIVIDE expression .)
    BINAND          reduce using rule 53 (expression -> expression DIVIDE expression .)
    BINOR           reduce using rule 53 (expression -> expression DIVIDE expression .)
    BINXOR          reduce using rule 53 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 53 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 53 (expression -> expression DIVIDE expression .)
    DOUBLEEQ        reduce using rule 53 (expression -> expression DIVIDE expression .)
    NOTEQUAL        reduce using rule 53 (expression -> expression DIVIDE expression .)
    LTE             reduce using rule 53 (expression -> expression DIVIDE expression .)
    GTE             reduce using rule 53 (expression -> expression DIVIDE expression .)
    STREQUAL        reduce using rule 53 (expression -> expression DIVIDE expression .)
    STRNEQUAL       reduce using rule 53 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 53 (expression -> expression DIVIDE expression .)
    RIGHTPAREN      reduce using rule 53 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 53 (expression -> expression DIVIDE expression .)
    LEFTBRACE       reduce using rule 53 (expression -> expression DIVIDE expression .)
    RIGHTBRACKET    reduce using rule 53 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 96 ]
  ! INTO            [ shift and go to state 87 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! MOD             [ shift and go to state 97 ]
  ! BINAND          [ shift and go to state 81 ]
  ! BINOR           [ shift and go to state 94 ]
  ! BINXOR          [ shift and go to state 82 ]
  ! LT              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 83 ]
  ! DOUBLEEQ        [ shift and go to state 86 ]
  ! NOTEQUAL        [ shift and go to state 95 ]
  ! LTE             [ shift and go to state 93 ]
  ! GTE             [ shift and go to state 88 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 89 ]


state 134

    (63) expression -> expression DOUBLEEQ expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    BINAND          reduce using rule 63 (expression -> expression DOUBLEEQ expression .)
    BINOR           reduce using rule 63 (expression -> expression DOUBLEEQ expression .)
    BINXOR          reduce using rule 63 (expression -> expression DOUBLEEQ expression .)
    DOUBLEEQ        reduce using rule 63 (expression -> expression DOUBLEEQ expression .)
    NOTEQUAL        reduce using rule 63 (expression -> expression DOUBLEEQ expression .)
    STREQUAL        reduce using rule 63 (expression -> expression DOUBLEEQ expression .)
    STRNEQUAL       reduce using rule 63 (expression -> expression DOUBLEEQ expression .)
    SEMICOLON       reduce using rule 63 (expression -> expression DOUBLEEQ expression .)
    RIGHTPAREN      reduce using rule 63 (expression -> expression DOUBLEEQ expression .)
    COMMA           reduce using rule 63 (expression -> expression DOUBLEEQ expression .)
    LEFTBRACE       reduce using rule 63 (expression -> expression DOUBLEEQ expression .)
    RIGHTBRACKET    reduce using rule 63 (expression -> expression DOUBLEEQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    LT              shift and go to state 91
    GT              shift and go to state 83
    LTE             shift and go to state 93
    GTE             shift and go to state 88

  ! PLUS            [ reduce using rule 63 (expression -> expression DOUBLEEQ expression .) ]
  ! MINUS           [ reduce using rule 63 (expression -> expression DOUBLEEQ expression .) ]
  ! INTO            [ reduce using rule 63 (expression -> expression DOUBLEEQ expression .) ]
  ! DIVIDE          [ reduce using rule 63 (expression -> expression DOUBLEEQ expression .) ]
  ! MOD             [ reduce using rule 63 (expression -> expression DOUBLEEQ expression .) ]
  ! LT              [ reduce using rule 63 (expression -> expression DOUBLEEQ expression .) ]
  ! GT              [ reduce using rule 63 (expression -> expression DOUBLEEQ expression .) ]
  ! LTE             [ reduce using rule 63 (expression -> expression DOUBLEEQ expression .) ]
  ! GTE             [ reduce using rule 63 (expression -> expression DOUBLEEQ expression .) ]
  ! BINAND          [ shift and go to state 81 ]
  ! BINOR           [ shift and go to state 94 ]
  ! BINXOR          [ shift and go to state 82 ]
  ! DOUBLEEQ        [ shift and go to state 86 ]
  ! NOTEQUAL        [ shift and go to state 95 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 89 ]


state 135

    (52) expression -> expression INTO expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    PLUS            reduce using rule 52 (expression -> expression INTO expression .)
    MINUS           reduce using rule 52 (expression -> expression INTO expression .)
    INTO            reduce using rule 52 (expression -> expression INTO expression .)
    DIVIDE          reduce using rule 52 (expression -> expression INTO expression .)
    MOD             reduce using rule 52 (expression -> expression INTO expression .)
    BINAND          reduce using rule 52 (expression -> expression INTO expression .)
    BINOR           reduce using rule 52 (expression -> expression INTO expression .)
    BINXOR          reduce using rule 52 (expression -> expression INTO expression .)
    LT              reduce using rule 52 (expression -> expression INTO expression .)
    GT              reduce using rule 52 (expression -> expression INTO expression .)
    DOUBLEEQ        reduce using rule 52 (expression -> expression INTO expression .)
    NOTEQUAL        reduce using rule 52 (expression -> expression INTO expression .)
    LTE             reduce using rule 52 (expression -> expression INTO expression .)
    GTE             reduce using rule 52 (expression -> expression INTO expression .)
    STREQUAL        reduce using rule 52 (expression -> expression INTO expression .)
    STRNEQUAL       reduce using rule 52 (expression -> expression INTO expression .)
    SEMICOLON       reduce using rule 52 (expression -> expression INTO expression .)
    RIGHTPAREN      reduce using rule 52 (expression -> expression INTO expression .)
    COMMA           reduce using rule 52 (expression -> expression INTO expression .)
    LEFTBRACE       reduce using rule 52 (expression -> expression INTO expression .)
    RIGHTBRACKET    reduce using rule 52 (expression -> expression INTO expression .)

  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 96 ]
  ! INTO            [ shift and go to state 87 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! MOD             [ shift and go to state 97 ]
  ! BINAND          [ shift and go to state 81 ]
  ! BINOR           [ shift and go to state 94 ]
  ! BINXOR          [ shift and go to state 82 ]
  ! LT              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 83 ]
  ! DOUBLEEQ        [ shift and go to state 86 ]
  ! NOTEQUAL        [ shift and go to state 95 ]
  ! LTE             [ shift and go to state 93 ]
  ! GTE             [ shift and go to state 88 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 89 ]


state 136

    (66) expression -> expression GTE expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    BINAND          reduce using rule 66 (expression -> expression GTE expression .)
    BINOR           reduce using rule 66 (expression -> expression GTE expression .)
    BINXOR          reduce using rule 66 (expression -> expression GTE expression .)
    LT              reduce using rule 66 (expression -> expression GTE expression .)
    GT              reduce using rule 66 (expression -> expression GTE expression .)
    DOUBLEEQ        reduce using rule 66 (expression -> expression GTE expression .)
    NOTEQUAL        reduce using rule 66 (expression -> expression GTE expression .)
    LTE             reduce using rule 66 (expression -> expression GTE expression .)
    GTE             reduce using rule 66 (expression -> expression GTE expression .)
    STREQUAL        reduce using rule 66 (expression -> expression GTE expression .)
    STRNEQUAL       reduce using rule 66 (expression -> expression GTE expression .)
    SEMICOLON       reduce using rule 66 (expression -> expression GTE expression .)
    RIGHTPAREN      reduce using rule 66 (expression -> expression GTE expression .)
    COMMA           reduce using rule 66 (expression -> expression GTE expression .)
    LEFTBRACE       reduce using rule 66 (expression -> expression GTE expression .)
    RIGHTBRACKET    reduce using rule 66 (expression -> expression GTE expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97

  ! PLUS            [ reduce using rule 66 (expression -> expression GTE expression .) ]
  ! MINUS           [ reduce using rule 66 (expression -> expression GTE expression .) ]
  ! INTO            [ reduce using rule 66 (expression -> expression GTE expression .) ]
  ! DIVIDE          [ reduce using rule 66 (expression -> expression GTE expression .) ]
  ! MOD             [ reduce using rule 66 (expression -> expression GTE expression .) ]
  ! BINAND          [ shift and go to state 81 ]
  ! BINOR           [ shift and go to state 94 ]
  ! BINXOR          [ shift and go to state 82 ]
  ! LT              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 83 ]
  ! DOUBLEEQ        [ shift and go to state 86 ]
  ! NOTEQUAL        [ shift and go to state 95 ]
  ! LTE             [ shift and go to state 93 ]
  ! GTE             [ shift and go to state 88 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 89 ]


state 137

    (68) expression -> expression STRNEQUAL expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    BINAND          reduce using rule 68 (expression -> expression STRNEQUAL expression .)
    BINOR           reduce using rule 68 (expression -> expression STRNEQUAL expression .)
    BINXOR          reduce using rule 68 (expression -> expression STRNEQUAL expression .)
    DOUBLEEQ        reduce using rule 68 (expression -> expression STRNEQUAL expression .)
    NOTEQUAL        reduce using rule 68 (expression -> expression STRNEQUAL expression .)
    STREQUAL        reduce using rule 68 (expression -> expression STRNEQUAL expression .)
    STRNEQUAL       reduce using rule 68 (expression -> expression STRNEQUAL expression .)
    SEMICOLON       reduce using rule 68 (expression -> expression STRNEQUAL expression .)
    RIGHTPAREN      reduce using rule 68 (expression -> expression STRNEQUAL expression .)
    COMMA           reduce using rule 68 (expression -> expression STRNEQUAL expression .)
    LEFTBRACE       reduce using rule 68 (expression -> expression STRNEQUAL expression .)
    RIGHTBRACKET    reduce using rule 68 (expression -> expression STRNEQUAL expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    LT              shift and go to state 91
    GT              shift and go to state 83
    LTE             shift and go to state 93
    GTE             shift and go to state 88

  ! PLUS            [ reduce using rule 68 (expression -> expression STRNEQUAL expression .) ]
  ! MINUS           [ reduce using rule 68 (expression -> expression STRNEQUAL expression .) ]
  ! INTO            [ reduce using rule 68 (expression -> expression STRNEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 68 (expression -> expression STRNEQUAL expression .) ]
  ! MOD             [ reduce using rule 68 (expression -> expression STRNEQUAL expression .) ]
  ! LT              [ reduce using rule 68 (expression -> expression STRNEQUAL expression .) ]
  ! GT              [ reduce using rule 68 (expression -> expression STRNEQUAL expression .) ]
  ! LTE             [ reduce using rule 68 (expression -> expression STRNEQUAL expression .) ]
  ! GTE             [ reduce using rule 68 (expression -> expression STRNEQUAL expression .) ]
  ! BINAND          [ shift and go to state 81 ]
  ! BINOR           [ shift and go to state 94 ]
  ! BINXOR          [ shift and go to state 82 ]
  ! DOUBLEEQ        [ shift and go to state 86 ]
  ! NOTEQUAL        [ shift and go to state 95 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 89 ]


state 138

    (67) expression -> expression STREQUAL expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    BINAND          reduce using rule 67 (expression -> expression STREQUAL expression .)
    BINOR           reduce using rule 67 (expression -> expression STREQUAL expression .)
    BINXOR          reduce using rule 67 (expression -> expression STREQUAL expression .)
    DOUBLEEQ        reduce using rule 67 (expression -> expression STREQUAL expression .)
    NOTEQUAL        reduce using rule 67 (expression -> expression STREQUAL expression .)
    STREQUAL        reduce using rule 67 (expression -> expression STREQUAL expression .)
    STRNEQUAL       reduce using rule 67 (expression -> expression STREQUAL expression .)
    SEMICOLON       reduce using rule 67 (expression -> expression STREQUAL expression .)
    RIGHTPAREN      reduce using rule 67 (expression -> expression STREQUAL expression .)
    COMMA           reduce using rule 67 (expression -> expression STREQUAL expression .)
    LEFTBRACE       reduce using rule 67 (expression -> expression STREQUAL expression .)
    RIGHTBRACKET    reduce using rule 67 (expression -> expression STREQUAL expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    LT              shift and go to state 91
    GT              shift and go to state 83
    LTE             shift and go to state 93
    GTE             shift and go to state 88

  ! PLUS            [ reduce using rule 67 (expression -> expression STREQUAL expression .) ]
  ! MINUS           [ reduce using rule 67 (expression -> expression STREQUAL expression .) ]
  ! INTO            [ reduce using rule 67 (expression -> expression STREQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 67 (expression -> expression STREQUAL expression .) ]
  ! MOD             [ reduce using rule 67 (expression -> expression STREQUAL expression .) ]
  ! LT              [ reduce using rule 67 (expression -> expression STREQUAL expression .) ]
  ! GT              [ reduce using rule 67 (expression -> expression STREQUAL expression .) ]
  ! LTE             [ reduce using rule 67 (expression -> expression STREQUAL expression .) ]
  ! GTE             [ reduce using rule 67 (expression -> expression STREQUAL expression .) ]
  ! BINAND          [ shift and go to state 81 ]
  ! BINOR           [ shift and go to state 94 ]
  ! BINXOR          [ shift and go to state 82 ]
  ! DOUBLEEQ        [ shift and go to state 86 ]
  ! NOTEQUAL        [ shift and go to state 95 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 89 ]


state 139

    (61) expression -> expression LT expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    BINAND          reduce using rule 61 (expression -> expression LT expression .)
    BINOR           reduce using rule 61 (expression -> expression LT expression .)
    BINXOR          reduce using rule 61 (expression -> expression LT expression .)
    LT              reduce using rule 61 (expression -> expression LT expression .)
    GT              reduce using rule 61 (expression -> expression LT expression .)
    DOUBLEEQ        reduce using rule 61 (expression -> expression LT expression .)
    NOTEQUAL        reduce using rule 61 (expression -> expression LT expression .)
    LTE             reduce using rule 61 (expression -> expression LT expression .)
    GTE             reduce using rule 61 (expression -> expression LT expression .)
    STREQUAL        reduce using rule 61 (expression -> expression LT expression .)
    STRNEQUAL       reduce using rule 61 (expression -> expression LT expression .)
    SEMICOLON       reduce using rule 61 (expression -> expression LT expression .)
    RIGHTPAREN      reduce using rule 61 (expression -> expression LT expression .)
    COMMA           reduce using rule 61 (expression -> expression LT expression .)
    LEFTBRACE       reduce using rule 61 (expression -> expression LT expression .)
    RIGHTBRACKET    reduce using rule 61 (expression -> expression LT expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97

  ! PLUS            [ reduce using rule 61 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 61 (expression -> expression LT expression .) ]
  ! INTO            [ reduce using rule 61 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 61 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 61 (expression -> expression LT expression .) ]
  ! BINAND          [ shift and go to state 81 ]
  ! BINOR           [ shift and go to state 94 ]
  ! BINXOR          [ shift and go to state 82 ]
  ! LT              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 83 ]
  ! DOUBLEEQ        [ shift and go to state 86 ]
  ! NOTEQUAL        [ shift and go to state 95 ]
  ! LTE             [ shift and go to state 93 ]
  ! GTE             [ shift and go to state 88 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 89 ]


state 140

    (50) expression -> expression PLUS expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    PLUS            reduce using rule 50 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 50 (expression -> expression PLUS expression .)
    BINAND          reduce using rule 50 (expression -> expression PLUS expression .)
    BINOR           reduce using rule 50 (expression -> expression PLUS expression .)
    BINXOR          reduce using rule 50 (expression -> expression PLUS expression .)
    LT              reduce using rule 50 (expression -> expression PLUS expression .)
    GT              reduce using rule 50 (expression -> expression PLUS expression .)
    DOUBLEEQ        reduce using rule 50 (expression -> expression PLUS expression .)
    NOTEQUAL        reduce using rule 50 (expression -> expression PLUS expression .)
    LTE             reduce using rule 50 (expression -> expression PLUS expression .)
    GTE             reduce using rule 50 (expression -> expression PLUS expression .)
    STREQUAL        reduce using rule 50 (expression -> expression PLUS expression .)
    STRNEQUAL       reduce using rule 50 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 50 (expression -> expression PLUS expression .)
    RIGHTPAREN      reduce using rule 50 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 50 (expression -> expression PLUS expression .)
    LEFTBRACE       reduce using rule 50 (expression -> expression PLUS expression .)
    RIGHTBRACKET    reduce using rule 50 (expression -> expression PLUS expression .)
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97

  ! INTO            [ reduce using rule 50 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 50 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 50 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 96 ]
  ! BINAND          [ shift and go to state 81 ]
  ! BINOR           [ shift and go to state 94 ]
  ! BINXOR          [ shift and go to state 82 ]
  ! LT              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 83 ]
  ! DOUBLEEQ        [ shift and go to state 86 ]
  ! NOTEQUAL        [ shift and go to state 95 ]
  ! LTE             [ shift and go to state 93 ]
  ! GTE             [ shift and go to state 88 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 89 ]


state 141

    (65) expression -> expression LTE expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    BINAND          reduce using rule 65 (expression -> expression LTE expression .)
    BINOR           reduce using rule 65 (expression -> expression LTE expression .)
    BINXOR          reduce using rule 65 (expression -> expression LTE expression .)
    LT              reduce using rule 65 (expression -> expression LTE expression .)
    GT              reduce using rule 65 (expression -> expression LTE expression .)
    DOUBLEEQ        reduce using rule 65 (expression -> expression LTE expression .)
    NOTEQUAL        reduce using rule 65 (expression -> expression LTE expression .)
    LTE             reduce using rule 65 (expression -> expression LTE expression .)
    GTE             reduce using rule 65 (expression -> expression LTE expression .)
    STREQUAL        reduce using rule 65 (expression -> expression LTE expression .)
    STRNEQUAL       reduce using rule 65 (expression -> expression LTE expression .)
    SEMICOLON       reduce using rule 65 (expression -> expression LTE expression .)
    RIGHTPAREN      reduce using rule 65 (expression -> expression LTE expression .)
    COMMA           reduce using rule 65 (expression -> expression LTE expression .)
    LEFTBRACE       reduce using rule 65 (expression -> expression LTE expression .)
    RIGHTBRACKET    reduce using rule 65 (expression -> expression LTE expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97

  ! PLUS            [ reduce using rule 65 (expression -> expression LTE expression .) ]
  ! MINUS           [ reduce using rule 65 (expression -> expression LTE expression .) ]
  ! INTO            [ reduce using rule 65 (expression -> expression LTE expression .) ]
  ! DIVIDE          [ reduce using rule 65 (expression -> expression LTE expression .) ]
  ! MOD             [ reduce using rule 65 (expression -> expression LTE expression .) ]
  ! BINAND          [ shift and go to state 81 ]
  ! BINOR           [ shift and go to state 94 ]
  ! BINXOR          [ shift and go to state 82 ]
  ! LT              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 83 ]
  ! DOUBLEEQ        [ shift and go to state 86 ]
  ! NOTEQUAL        [ shift and go to state 95 ]
  ! LTE             [ shift and go to state 93 ]
  ! GTE             [ shift and go to state 88 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 89 ]


state 142

    (58) expression -> expression BINOR expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    BINOR           reduce using rule 58 (expression -> expression BINOR expression .)
    SEMICOLON       reduce using rule 58 (expression -> expression BINOR expression .)
    RIGHTPAREN      reduce using rule 58 (expression -> expression BINOR expression .)
    COMMA           reduce using rule 58 (expression -> expression BINOR expression .)
    LEFTBRACE       reduce using rule 58 (expression -> expression BINOR expression .)
    RIGHTBRACKET    reduce using rule 58 (expression -> expression BINOR expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    BINAND          shift and go to state 81
    BINXOR          shift and go to state 82
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89

  ! PLUS            [ reduce using rule 58 (expression -> expression BINOR expression .) ]
  ! MINUS           [ reduce using rule 58 (expression -> expression BINOR expression .) ]
  ! INTO            [ reduce using rule 58 (expression -> expression BINOR expression .) ]
  ! DIVIDE          [ reduce using rule 58 (expression -> expression BINOR expression .) ]
  ! MOD             [ reduce using rule 58 (expression -> expression BINOR expression .) ]
  ! BINAND          [ reduce using rule 58 (expression -> expression BINOR expression .) ]
  ! BINXOR          [ reduce using rule 58 (expression -> expression BINOR expression .) ]
  ! LT              [ reduce using rule 58 (expression -> expression BINOR expression .) ]
  ! GT              [ reduce using rule 58 (expression -> expression BINOR expression .) ]
  ! DOUBLEEQ        [ reduce using rule 58 (expression -> expression BINOR expression .) ]
  ! NOTEQUAL        [ reduce using rule 58 (expression -> expression BINOR expression .) ]
  ! LTE             [ reduce using rule 58 (expression -> expression BINOR expression .) ]
  ! GTE             [ reduce using rule 58 (expression -> expression BINOR expression .) ]
  ! STREQUAL        [ reduce using rule 58 (expression -> expression BINOR expression .) ]
  ! STRNEQUAL       [ reduce using rule 58 (expression -> expression BINOR expression .) ]
  ! BINOR           [ shift and go to state 94 ]


state 143

    (64) expression -> expression NOTEQUAL expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    BINAND          reduce using rule 64 (expression -> expression NOTEQUAL expression .)
    BINOR           reduce using rule 64 (expression -> expression NOTEQUAL expression .)
    BINXOR          reduce using rule 64 (expression -> expression NOTEQUAL expression .)
    DOUBLEEQ        reduce using rule 64 (expression -> expression NOTEQUAL expression .)
    NOTEQUAL        reduce using rule 64 (expression -> expression NOTEQUAL expression .)
    STREQUAL        reduce using rule 64 (expression -> expression NOTEQUAL expression .)
    STRNEQUAL       reduce using rule 64 (expression -> expression NOTEQUAL expression .)
    SEMICOLON       reduce using rule 64 (expression -> expression NOTEQUAL expression .)
    RIGHTPAREN      reduce using rule 64 (expression -> expression NOTEQUAL expression .)
    COMMA           reduce using rule 64 (expression -> expression NOTEQUAL expression .)
    LEFTBRACE       reduce using rule 64 (expression -> expression NOTEQUAL expression .)
    RIGHTBRACKET    reduce using rule 64 (expression -> expression NOTEQUAL expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    LT              shift and go to state 91
    GT              shift and go to state 83
    LTE             shift and go to state 93
    GTE             shift and go to state 88

  ! PLUS            [ reduce using rule 64 (expression -> expression NOTEQUAL expression .) ]
  ! MINUS           [ reduce using rule 64 (expression -> expression NOTEQUAL expression .) ]
  ! INTO            [ reduce using rule 64 (expression -> expression NOTEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 64 (expression -> expression NOTEQUAL expression .) ]
  ! MOD             [ reduce using rule 64 (expression -> expression NOTEQUAL expression .) ]
  ! LT              [ reduce using rule 64 (expression -> expression NOTEQUAL expression .) ]
  ! GT              [ reduce using rule 64 (expression -> expression NOTEQUAL expression .) ]
  ! LTE             [ reduce using rule 64 (expression -> expression NOTEQUAL expression .) ]
  ! GTE             [ reduce using rule 64 (expression -> expression NOTEQUAL expression .) ]
  ! BINAND          [ shift and go to state 81 ]
  ! BINOR           [ shift and go to state 94 ]
  ! BINXOR          [ shift and go to state 82 ]
  ! DOUBLEEQ        [ shift and go to state 86 ]
  ! NOTEQUAL        [ shift and go to state 95 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 89 ]


state 144

    (51) expression -> expression MINUS expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    PLUS            reduce using rule 51 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 51 (expression -> expression MINUS expression .)
    BINAND          reduce using rule 51 (expression -> expression MINUS expression .)
    BINOR           reduce using rule 51 (expression -> expression MINUS expression .)
    BINXOR          reduce using rule 51 (expression -> expression MINUS expression .)
    LT              reduce using rule 51 (expression -> expression MINUS expression .)
    GT              reduce using rule 51 (expression -> expression MINUS expression .)
    DOUBLEEQ        reduce using rule 51 (expression -> expression MINUS expression .)
    NOTEQUAL        reduce using rule 51 (expression -> expression MINUS expression .)
    LTE             reduce using rule 51 (expression -> expression MINUS expression .)
    GTE             reduce using rule 51 (expression -> expression MINUS expression .)
    STREQUAL        reduce using rule 51 (expression -> expression MINUS expression .)
    STRNEQUAL       reduce using rule 51 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 51 (expression -> expression MINUS expression .)
    RIGHTPAREN      reduce using rule 51 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 51 (expression -> expression MINUS expression .)
    LEFTBRACE       reduce using rule 51 (expression -> expression MINUS expression .)
    RIGHTBRACKET    reduce using rule 51 (expression -> expression MINUS expression .)
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97

  ! INTO            [ reduce using rule 51 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 51 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 51 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 96 ]
  ! BINAND          [ shift and go to state 81 ]
  ! BINOR           [ shift and go to state 94 ]
  ! BINXOR          [ shift and go to state 82 ]
  ! LT              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 83 ]
  ! DOUBLEEQ        [ shift and go to state 86 ]
  ! NOTEQUAL        [ shift and go to state 95 ]
  ! LTE             [ shift and go to state 93 ]
  ! GTE             [ shift and go to state 88 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 89 ]


state 145

    (54) expression -> expression MOD expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    PLUS            reduce using rule 54 (expression -> expression MOD expression .)
    MINUS           reduce using rule 54 (expression -> expression MOD expression .)
    INTO            reduce using rule 54 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 54 (expression -> expression MOD expression .)
    MOD             reduce using rule 54 (expression -> expression MOD expression .)
    BINAND          reduce using rule 54 (expression -> expression MOD expression .)
    BINOR           reduce using rule 54 (expression -> expression MOD expression .)
    BINXOR          reduce using rule 54 (expression -> expression MOD expression .)
    LT              reduce using rule 54 (expression -> expression MOD expression .)
    GT              reduce using rule 54 (expression -> expression MOD expression .)
    DOUBLEEQ        reduce using rule 54 (expression -> expression MOD expression .)
    NOTEQUAL        reduce using rule 54 (expression -> expression MOD expression .)
    LTE             reduce using rule 54 (expression -> expression MOD expression .)
    GTE             reduce using rule 54 (expression -> expression MOD expression .)
    STREQUAL        reduce using rule 54 (expression -> expression MOD expression .)
    STRNEQUAL       reduce using rule 54 (expression -> expression MOD expression .)
    SEMICOLON       reduce using rule 54 (expression -> expression MOD expression .)
    RIGHTPAREN      reduce using rule 54 (expression -> expression MOD expression .)
    COMMA           reduce using rule 54 (expression -> expression MOD expression .)
    LEFTBRACE       reduce using rule 54 (expression -> expression MOD expression .)
    RIGHTBRACKET    reduce using rule 54 (expression -> expression MOD expression .)

  ! PLUS            [ shift and go to state 92 ]
  ! MINUS           [ shift and go to state 96 ]
  ! INTO            [ shift and go to state 87 ]
  ! DIVIDE          [ shift and go to state 84 ]
  ! MOD             [ shift and go to state 97 ]
  ! BINAND          [ shift and go to state 81 ]
  ! BINOR           [ shift and go to state 94 ]
  ! BINXOR          [ shift and go to state 82 ]
  ! LT              [ shift and go to state 91 ]
  ! GT              [ shift and go to state 83 ]
  ! DOUBLEEQ        [ shift and go to state 86 ]
  ! NOTEQUAL        [ shift and go to state 95 ]
  ! LTE             [ shift and go to state 93 ]
  ! GTE             [ shift and go to state 88 ]
  ! STREQUAL        [ shift and go to state 90 ]
  ! STRNEQUAL       [ shift and go to state 89 ]


state 146

    (105) initialization -> assignment .

    SEMICOLON       reduce using rule 105 (initialization -> assignment .)


state 147

    (98) forloop -> FOR scope_marker LEFTPAREN initialization . SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker

    SEMICOLON       shift and go to state 167


state 148

    (26) assignment -> VAR . assignlist
    (27) assignlist -> . ID EQ expression COMMA assignlist
    (28) assignlist -> . ID EQ expression
    (29) assignlist -> . ID EQ array

    ID              shift and go to state 168

    assignlist                     shift and go to state 56

state 149

    (106) initialization -> reinitialization .

    SEMICOLON       reduce using rule 106 (initialization -> reinitialization .)


state 150

    (107) reinitialization -> reassignment . COMMA reinitialization
    (108) reinitialization -> reassignment .

    COMMA           shift and go to state 169
    SEMICOLON       reduce using rule 108 (reinitialization -> reassignment .)


state 151

    (88) if -> IF expression ifelseblock block . ifblockend
    (90) ifelse -> IF expression ifelseblock block . ELSE elseblock block elseblockend
    (89) ifblockend -> .

    ELSE            shift and go to state 171
    BREAK           reduce using rule 89 (ifblockend -> .)
    CONTINUE        reduce using rule 89 (ifblockend -> .)
    RETURN          reduce using rule 89 (ifblockend -> .)
    CONSOLE         reduce using rule 89 (ifblockend -> .)
    VAR             reduce using rule 89 (ifblockend -> .)
    ID              reduce using rule 89 (ifblockend -> .)
    LEFTPAREN       reduce using rule 89 (ifblockend -> .)
    IF              reduce using rule 89 (ifblockend -> .)
    WHILE           reduce using rule 89 (ifblockend -> .)
    FUNCTION        reduce using rule 89 (ifblockend -> .)
    FOR             reduce using rule 89 (ifblockend -> .)
    $end            reduce using rule 89 (ifblockend -> .)
    RIGHTBRACE      reduce using rule 89 (ifblockend -> .)

    ifblockend                     shift and go to state 170

state 152

    (116) funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN . funcarghead RIGHTPAREN funblock endfunc
    (112) funcarghead -> . funcargList
    (113) funcargList -> . ID COMMA funcargList
    (114) funcargList -> . ID
    (115) funcargList -> .

    ID              shift and go to state 174
    RIGHTPAREN      reduce using rule 115 (funcargList -> .)

    funcarghead                    shift and go to state 172
    funcargList                    shift and go to state 173

state 153

    (20) statement -> CONSOLE DOT LOG LEFTPAREN . printList RIGHTPAREN SEMICOLON
    (21) printList -> . expression COMMA printList
    (22) printList -> . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    expression                     shift and go to state 176
    arrayCall                      shift and go to state 33
    printList                      shift and go to state 175
    basicTypes                     shift and go to state 41

state 154

    (24) declarationList -> ID COMMA declarationList .

    SEMICOLON       reduce using rule 24 (declarationList -> ID COMMA declarationList .)


state 155

    (24) declarationList -> ID . COMMA declarationList
    (25) declarationList -> ID .

    COMMA           shift and go to state 108
    SEMICOLON       reduce using rule 25 (declarationList -> ID .)


state 156

    (29) assignlist -> ID EQ array .

    SEMICOLON       reduce using rule 29 (assignlist -> ID EQ array .)


state 157

    (45) array -> LEFTBRACKET . arrayList RIGHTBRACKET
    (46) arrayList -> . array COMMA arrayList
    (47) arrayList -> . array
    (48) arrayList -> . expression COMMA arrayList
    (49) arrayList -> . expression
    (45) array -> . LEFTBRACKET arrayList RIGHTBRACKET
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTBRACKET     shift and go to state 157
    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayList                      shift and go to state 178
    arrayCall                      shift and go to state 33
    array                          shift and go to state 177
    expression                     shift and go to state 179
    basicTypes                     shift and go to state 41

state 158

    (119) funcdecl -> VAR ID EQ FUNCTION . funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl
    (121) funcscopedef -> .

    LEFTPAREN       reduce using rule 121 (funcscopedef -> .)

    funcscopedef                   shift and go to state 180

state 159

    (84) functioncall -> ID . LEFTPAREN argList RIGHTPAREN
    (70) expression -> ID .
    (77) arrayCall -> ID . reference
    (78) reference -> . LEFTBRACKET expression RIGHTBRACKET reference
    (79) reference -> . LEFTBRACKET expression RIGHTBRACKET

    LEFTPAREN       shift and go to state 71
    COMMA           reduce using rule 70 (expression -> ID .)
    PLUS            reduce using rule 70 (expression -> ID .)
    MINUS           reduce using rule 70 (expression -> ID .)
    INTO            reduce using rule 70 (expression -> ID .)
    DIVIDE          reduce using rule 70 (expression -> ID .)
    MOD             reduce using rule 70 (expression -> ID .)
    BINAND          reduce using rule 70 (expression -> ID .)
    BINOR           reduce using rule 70 (expression -> ID .)
    BINXOR          reduce using rule 70 (expression -> ID .)
    LT              reduce using rule 70 (expression -> ID .)
    GT              reduce using rule 70 (expression -> ID .)
    DOUBLEEQ        reduce using rule 70 (expression -> ID .)
    NOTEQUAL        reduce using rule 70 (expression -> ID .)
    LTE             reduce using rule 70 (expression -> ID .)
    GTE             reduce using rule 70 (expression -> ID .)
    STREQUAL        reduce using rule 70 (expression -> ID .)
    STRNEQUAL       reduce using rule 70 (expression -> ID .)
    SEMICOLON       reduce using rule 70 (expression -> ID .)
    LEFTBRACKET     shift and go to state 67

    reference                      shift and go to state 59

state 160

    (74) funcstmt -> VAR ID EQ functioncall .

    SEMICOLON       reduce using rule 74 (funcstmt -> VAR ID EQ functioncall .)


state 161

    (27) assignlist -> ID EQ expression . COMMA assignlist
    (28) assignlist -> ID EQ expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    COMMA           shift and go to state 181
    SEMICOLON       reduce using rule 28 (assignlist -> ID EQ expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    BINAND          shift and go to state 81
    BINOR           shift and go to state 94
    BINXOR          shift and go to state 82
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89


state 162

    (78) reference -> LEFTBRACKET expression RIGHTBRACKET . reference
    (79) reference -> LEFTBRACKET expression RIGHTBRACKET .
    (78) reference -> . LEFTBRACKET expression RIGHTBRACKET reference
    (79) reference -> . LEFTBRACKET expression RIGHTBRACKET

    EQ              reduce using rule 79 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    SEMICOLON       reduce using rule 79 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    PLUS            reduce using rule 79 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    MINUS           reduce using rule 79 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    INTO            reduce using rule 79 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    DIVIDE          reduce using rule 79 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    MOD             reduce using rule 79 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    BINAND          reduce using rule 79 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    BINOR           reduce using rule 79 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    BINXOR          reduce using rule 79 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    LT              reduce using rule 79 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    GT              reduce using rule 79 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    DOUBLEEQ        reduce using rule 79 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    NOTEQUAL        reduce using rule 79 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    LTE             reduce using rule 79 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    GTE             reduce using rule 79 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    STREQUAL        reduce using rule 79 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    STRNEQUAL       reduce using rule 79 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    LEFTBRACE       reduce using rule 79 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    RIGHTPAREN      reduce using rule 79 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    COMMA           reduce using rule 79 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 79 (reference -> LEFTBRACKET expression RIGHTBRACKET .)
    LEFTBRACKET     shift and go to state 67

    reference                      shift and go to state 182

state 163

    (84) functioncall -> ID LEFTPAREN argList RIGHTPAREN .

    SEMICOLON       reduce using rule 84 (functioncall -> ID LEFTPAREN argList RIGHTPAREN .)


state 164

    (86) argList -> expression COMMA . argList
    (85) argList -> . expression
    (86) argList -> . expression COMMA argList
    (87) argList -> .
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    RIGHTPAREN      reduce using rule 87 (argList -> .)
    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    argList                        shift and go to state 183
    expression                     shift and go to state 120
    basicTypes                     shift and go to state 41

state 165

    (3) block -> LEFTBRACE blockmarker statements RIGHTBRACE .

    ELSE            reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    BREAK           reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    CONTINUE        reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    RETURN          reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    CONSOLE         reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    VAR             reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    ID              reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    LEFTPAREN       reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    IF              reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    WHILE           reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    FUNCTION        reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    FOR             reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    $end            reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)
    RIGHTBRACE      reduce using rule 3 (block -> LEFTBRACE blockmarker statements RIGHTBRACE .)


state 166

    (94) whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN . exprcheck block whileblockend
    (96) exprcheck -> . empty
    (123) empty -> .

    LEFTBRACE       reduce using rule 123 (empty -> .)

    exprcheck                      shift and go to state 184
    empty                          shift and go to state 185

state 167

    (98) forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON . forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker
    (100) forexpr_marker -> .

    LEFTPAREN       reduce using rule 100 (forexpr_marker -> .)
    NOT             reduce using rule 100 (forexpr_marker -> .)
    BINNOT          reduce using rule 100 (forexpr_marker -> .)
    ID              reduce using rule 100 (forexpr_marker -> .)
    TYPEOF          reduce using rule 100 (forexpr_marker -> .)
    NUMBER          reduce using rule 100 (forexpr_marker -> .)
    BOOLEAN         reduce using rule 100 (forexpr_marker -> .)
    STRING          reduce using rule 100 (forexpr_marker -> .)
    UNDEFINED       reduce using rule 100 (forexpr_marker -> .)

    forexpr_marker                 shift and go to state 186

state 168

    (27) assignlist -> ID . EQ expression COMMA assignlist
    (28) assignlist -> ID . EQ expression
    (29) assignlist -> ID . EQ array

    EQ              shift and go to state 187


state 169

    (107) reinitialization -> reassignment COMMA . reinitialization
    (107) reinitialization -> . reassignment COMMA reinitialization
    (108) reinitialization -> . reassignment
    (30) reassignment -> . ID EQ expression
    (31) reassignment -> . ID PLUSEQ expression
    (32) reassignment -> . ID MINUSEQ expression
    (33) reassignment -> . ID INTOEQ expression
    (34) reassignment -> . ID DIVEQ expression
    (35) reassignment -> . ID INCR
    (36) reassignment -> . ID DECR
    (37) reassignment -> . ID LSHIFTEQ expression
    (38) reassignment -> . ID RSHIFTEQ expression
    (39) reassignment -> . ID URSHIFTEQ expression
    (40) reassignment -> . ID ANDEQ expression
    (41) reassignment -> . ID OREQ expression
    (42) reassignment -> . ID XOREQ expression
    (43) reassignment -> . ID MODEQ expression
    (44) reassignment -> . LEFTPAREN reassignment RIGHTPAREN

    ID              shift and go to state 54
    LEFTPAREN       shift and go to state 19

    reassignment                   shift and go to state 150
    reinitialization               shift and go to state 188

state 170

    (88) if -> IF expression ifelseblock block ifblockend .

    BREAK           reduce using rule 88 (if -> IF expression ifelseblock block ifblockend .)
    CONTINUE        reduce using rule 88 (if -> IF expression ifelseblock block ifblockend .)
    RETURN          reduce using rule 88 (if -> IF expression ifelseblock block ifblockend .)
    CONSOLE         reduce using rule 88 (if -> IF expression ifelseblock block ifblockend .)
    VAR             reduce using rule 88 (if -> IF expression ifelseblock block ifblockend .)
    ID              reduce using rule 88 (if -> IF expression ifelseblock block ifblockend .)
    LEFTPAREN       reduce using rule 88 (if -> IF expression ifelseblock block ifblockend .)
    IF              reduce using rule 88 (if -> IF expression ifelseblock block ifblockend .)
    WHILE           reduce using rule 88 (if -> IF expression ifelseblock block ifblockend .)
    FUNCTION        reduce using rule 88 (if -> IF expression ifelseblock block ifblockend .)
    FOR             reduce using rule 88 (if -> IF expression ifelseblock block ifblockend .)
    $end            reduce using rule 88 (if -> IF expression ifelseblock block ifblockend .)
    RIGHTBRACE      reduce using rule 88 (if -> IF expression ifelseblock block ifblockend .)


state 171

    (90) ifelse -> IF expression ifelseblock block ELSE . elseblock block elseblockend
    (92) elseblock -> . empty
    (123) empty -> .

    LEFTBRACE       reduce using rule 123 (empty -> .)

    elseblock                      shift and go to state 189
    empty                          shift and go to state 190

state 172

    (116) funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead . RIGHTPAREN funblock endfunc

    RIGHTPAREN      shift and go to state 191


state 173

    (112) funcarghead -> funcargList .

    RIGHTPAREN      reduce using rule 112 (funcarghead -> funcargList .)


state 174

    (113) funcargList -> ID . COMMA funcargList
    (114) funcargList -> ID .

    COMMA           shift and go to state 192
    RIGHTPAREN      reduce using rule 114 (funcargList -> ID .)


state 175

    (20) statement -> CONSOLE DOT LOG LEFTPAREN printList . RIGHTPAREN SEMICOLON

    RIGHTPAREN      shift and go to state 193


state 176

    (21) printList -> expression . COMMA printList
    (22) printList -> expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    COMMA           shift and go to state 194
    RIGHTPAREN      reduce using rule 22 (printList -> expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    BINAND          shift and go to state 81
    BINOR           shift and go to state 94
    BINXOR          shift and go to state 82
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89


state 177

    (46) arrayList -> array . COMMA arrayList
    (47) arrayList -> array .

    COMMA           shift and go to state 195
    RIGHTBRACKET    reduce using rule 47 (arrayList -> array .)


state 178

    (45) array -> LEFTBRACKET arrayList . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 196


state 179

    (48) arrayList -> expression . COMMA arrayList
    (49) arrayList -> expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    COMMA           shift and go to state 197
    RIGHTBRACKET    reduce using rule 49 (arrayList -> expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    BINAND          shift and go to state 81
    BINOR           shift and go to state 94
    BINXOR          shift and go to state 82
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89


state 180

    (119) funcdecl -> VAR ID EQ FUNCTION funcscopedef . LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl

    LEFTPAREN       shift and go to state 198


state 181

    (27) assignlist -> ID EQ expression COMMA . assignlist
    (27) assignlist -> . ID EQ expression COMMA assignlist
    (28) assignlist -> . ID EQ expression
    (29) assignlist -> . ID EQ array

    ID              shift and go to state 168

    assignlist                     shift and go to state 199

state 182

    (78) reference -> LEFTBRACKET expression RIGHTBRACKET reference .

    EQ              reduce using rule 78 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    SEMICOLON       reduce using rule 78 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    PLUS            reduce using rule 78 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    MINUS           reduce using rule 78 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    INTO            reduce using rule 78 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    DIVIDE          reduce using rule 78 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    MOD             reduce using rule 78 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    BINAND          reduce using rule 78 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    BINOR           reduce using rule 78 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    BINXOR          reduce using rule 78 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    LT              reduce using rule 78 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    GT              reduce using rule 78 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    DOUBLEEQ        reduce using rule 78 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    NOTEQUAL        reduce using rule 78 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    LTE             reduce using rule 78 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    GTE             reduce using rule 78 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    STREQUAL        reduce using rule 78 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    STRNEQUAL       reduce using rule 78 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    LEFTBRACE       reduce using rule 78 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    RIGHTPAREN      reduce using rule 78 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    COMMA           reduce using rule 78 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)
    RIGHTBRACKET    reduce using rule 78 (reference -> LEFTBRACKET expression RIGHTBRACKET reference .)


state 183

    (86) argList -> expression COMMA argList .

    RIGHTPAREN      reduce using rule 86 (argList -> expression COMMA argList .)


state 184

    (94) whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck . block whileblockend
    (3) block -> . LEFTBRACE blockmarker statements RIGHTBRACE

    LEFTBRACE       shift and go to state 23

    block                          shift and go to state 200

state 185

    (96) exprcheck -> empty .

    LEFTBRACE       reduce using rule 96 (exprcheck -> empty .)


state 186

    (98) forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker . for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker
    (109) for_expr -> . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    for_expr                       shift and go to state 201
    basicTypes                     shift and go to state 41
    expression                     shift and go to state 202

state 187

    (27) assignlist -> ID EQ . expression COMMA assignlist
    (28) assignlist -> ID EQ . expression
    (29) assignlist -> ID EQ . array
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (45) array -> . LEFTBRACKET arrayList RIGHTBRACKET
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    LEFTBRACKET     shift and go to state 157
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayCall                      shift and go to state 33
    array                          shift and go to state 156
    expression                     shift and go to state 161
    basicTypes                     shift and go to state 41

state 188

    (107) reinitialization -> reassignment COMMA reinitialization .

    SEMICOLON       reduce using rule 107 (reinitialization -> reassignment COMMA reinitialization .)


state 189

    (90) ifelse -> IF expression ifelseblock block ELSE elseblock . block elseblockend
    (3) block -> . LEFTBRACE blockmarker statements RIGHTBRACE

    LEFTBRACE       shift and go to state 23

    block                          shift and go to state 203

state 190

    (92) elseblock -> empty .

    LEFTBRACE       reduce using rule 92 (elseblock -> empty .)


state 191

    (116) funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN . funblock endfunc
    (120) funblock -> . LEFTBRACE statements RIGHTBRACE

    LEFTBRACE       shift and go to state 205

    funblock                       shift and go to state 204

state 192

    (113) funcargList -> ID COMMA . funcargList
    (113) funcargList -> . ID COMMA funcargList
    (114) funcargList -> . ID
    (115) funcargList -> .

    ID              shift and go to state 174
    RIGHTPAREN      reduce using rule 115 (funcargList -> .)

    funcargList                    shift and go to state 206

state 193

    (20) statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN . SEMICOLON

    SEMICOLON       shift and go to state 207


state 194

    (21) printList -> expression COMMA . printList
    (21) printList -> . expression COMMA printList
    (22) printList -> . expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    printList                      shift and go to state 208
    arrayCall                      shift and go to state 33
    expression                     shift and go to state 176
    basicTypes                     shift and go to state 41

state 195

    (46) arrayList -> array COMMA . arrayList
    (46) arrayList -> . array COMMA arrayList
    (47) arrayList -> . array
    (48) arrayList -> . expression COMMA arrayList
    (49) arrayList -> . expression
    (45) array -> . LEFTBRACKET arrayList RIGHTBRACKET
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTBRACKET     shift and go to state 157
    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayList                      shift and go to state 209
    arrayCall                      shift and go to state 33
    array                          shift and go to state 177
    expression                     shift and go to state 179
    basicTypes                     shift and go to state 41

state 196

    (45) array -> LEFTBRACKET arrayList RIGHTBRACKET .

    COMMA           reduce using rule 45 (array -> LEFTBRACKET arrayList RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 45 (array -> LEFTBRACKET arrayList RIGHTBRACKET .)
    SEMICOLON       reduce using rule 45 (array -> LEFTBRACKET arrayList RIGHTBRACKET .)


state 197

    (48) arrayList -> expression COMMA . arrayList
    (46) arrayList -> . array COMMA arrayList
    (47) arrayList -> . array
    (48) arrayList -> . expression COMMA arrayList
    (49) arrayList -> . expression
    (45) array -> . LEFTBRACKET arrayList RIGHTBRACKET
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . expression INTO expression
    (53) expression -> . expression DIVIDE expression
    (54) expression -> . expression MOD expression
    (55) expression -> . LEFTPAREN expression RIGHTPAREN
    (56) expression -> . NOT expression
    (57) expression -> . expression BINAND expression
    (58) expression -> . expression BINOR expression
    (59) expression -> . expression BINXOR expression
    (60) expression -> . BINNOT expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression DOUBLEEQ expression
    (64) expression -> . expression NOTEQUAL expression
    (65) expression -> . expression LTE expression
    (66) expression -> . expression GTE expression
    (67) expression -> . expression STREQUAL expression
    (68) expression -> . expression STRNEQUAL expression
    (69) expression -> . basicTypes
    (70) expression -> . ID
    (71) expression -> . TYPEOF expression
    (75) expression -> . arrayCall
    (80) basicTypes -> . NUMBER
    (81) basicTypes -> . BOOLEAN
    (82) basicTypes -> . STRING
    (83) basicTypes -> . UNDEFINED
    (77) arrayCall -> . ID reference

    LEFTBRACKET     shift and go to state 157
    LEFTPAREN       shift and go to state 35
    NOT             shift and go to state 40
    BINNOT          shift and go to state 42
    ID              shift and go to state 36
    TYPEOF          shift and go to state 39
    NUMBER          shift and go to state 32
    BOOLEAN         shift and go to state 38
    STRING          shift and go to state 34
    UNDEFINED       shift and go to state 31

    arrayList                      shift and go to state 210
    arrayCall                      shift and go to state 33
    array                          shift and go to state 177
    expression                     shift and go to state 179
    basicTypes                     shift and go to state 41

state 198

    (119) funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN . funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl
    (112) funcarghead -> . funcargList
    (113) funcargList -> . ID COMMA funcargList
    (114) funcargList -> . ID
    (115) funcargList -> .

    ID              shift and go to state 174
    RIGHTPAREN      reduce using rule 115 (funcargList -> .)

    funcarghead                    shift and go to state 211
    funcargList                    shift and go to state 173

state 199

    (27) assignlist -> ID EQ expression COMMA assignlist .

    SEMICOLON       reduce using rule 27 (assignlist -> ID EQ expression COMMA assignlist .)


state 200

    (94) whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block . whileblockend
    (97) whileblockend -> . empty
    (123) empty -> .

    BREAK           reduce using rule 123 (empty -> .)
    CONTINUE        reduce using rule 123 (empty -> .)
    RETURN          reduce using rule 123 (empty -> .)
    CONSOLE         reduce using rule 123 (empty -> .)
    VAR             reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    LEFTPAREN       reduce using rule 123 (empty -> .)
    IF              reduce using rule 123 (empty -> .)
    WHILE           reduce using rule 123 (empty -> .)
    FUNCTION        reduce using rule 123 (empty -> .)
    FOR             reduce using rule 123 (empty -> .)
    $end            reduce using rule 123 (empty -> .)
    RIGHTBRACE      reduce using rule 123 (empty -> .)

    whileblockend                  shift and go to state 212
    empty                          shift and go to state 213

state 201

    (98) forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr . forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker
    (101) forcheck_marker -> .

    SEMICOLON       reduce using rule 101 (forcheck_marker -> .)

    forcheck_marker                shift and go to state 214

state 202

    (109) for_expr -> expression .
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (52) expression -> expression . INTO expression
    (53) expression -> expression . DIVIDE expression
    (54) expression -> expression . MOD expression
    (57) expression -> expression . BINAND expression
    (58) expression -> expression . BINOR expression
    (59) expression -> expression . BINXOR expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . DOUBLEEQ expression
    (64) expression -> expression . NOTEQUAL expression
    (65) expression -> expression . LTE expression
    (66) expression -> expression . GTE expression
    (67) expression -> expression . STREQUAL expression
    (68) expression -> expression . STRNEQUAL expression

    SEMICOLON       reduce using rule 109 (for_expr -> expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 96
    INTO            shift and go to state 87
    DIVIDE          shift and go to state 84
    MOD             shift and go to state 97
    BINAND          shift and go to state 81
    BINOR           shift and go to state 94
    BINXOR          shift and go to state 82
    LT              shift and go to state 91
    GT              shift and go to state 83
    DOUBLEEQ        shift and go to state 86
    NOTEQUAL        shift and go to state 95
    LTE             shift and go to state 93
    GTE             shift and go to state 88
    STREQUAL        shift and go to state 90
    STRNEQUAL       shift and go to state 89


state 203

    (90) ifelse -> IF expression ifelseblock block ELSE elseblock block . elseblockend
    (93) elseblockend -> . empty
    (123) empty -> .

    BREAK           reduce using rule 123 (empty -> .)
    CONTINUE        reduce using rule 123 (empty -> .)
    RETURN          reduce using rule 123 (empty -> .)
    CONSOLE         reduce using rule 123 (empty -> .)
    VAR             reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    LEFTPAREN       reduce using rule 123 (empty -> .)
    IF              reduce using rule 123 (empty -> .)
    WHILE           reduce using rule 123 (empty -> .)
    FUNCTION        reduce using rule 123 (empty -> .)
    FOR             reduce using rule 123 (empty -> .)
    $end            reduce using rule 123 (empty -> .)
    RIGHTBRACE      reduce using rule 123 (empty -> .)

    elseblockend                   shift and go to state 216
    empty                          shift and go to state 215

state 204

    (116) funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock . endfunc
    (118) endfunc -> . empty
    (123) empty -> .

    BREAK           reduce using rule 123 (empty -> .)
    CONTINUE        reduce using rule 123 (empty -> .)
    RETURN          reduce using rule 123 (empty -> .)
    CONSOLE         reduce using rule 123 (empty -> .)
    VAR             reduce using rule 123 (empty -> .)
    ID              reduce using rule 123 (empty -> .)
    LEFTPAREN       reduce using rule 123 (empty -> .)
    IF              reduce using rule 123 (empty -> .)
    WHILE           reduce using rule 123 (empty -> .)
    FUNCTION        reduce using rule 123 (empty -> .)
    FOR             reduce using rule 123 (empty -> .)
    $end            reduce using rule 123 (empty -> .)
    RIGHTBRACE      reduce using rule 123 (empty -> .)

    endfunc                        shift and go to state 217
    empty                          shift and go to state 218

state 205

    (120) funblock -> LEFTBRACE . statements RIGHTBRACE
    (5) statements -> . statement statements
    (6) statements -> . statement
    (7) statement -> . assignment SEMICOLON
    (8) statement -> . declaration SEMICOLON
    (9) statement -> . reassignment SEMICOLON
    (10) statement -> . BREAK SEMICOLON
    (11) statement -> . CONTINUE SEMICOLON
    (12) statement -> . funcstmt SEMICOLON
    (13) statement -> . if
    (14) statement -> . ifelse
    (15) statement -> . whileloop
    (16) statement -> . funcdecl
    (17) statement -> . forloop
    (18) statement -> . reassignmentarray SEMICOLON
    (19) statement -> . RETURN expression SEMICOLON
    (20) statement -> . CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON
    (26) assignment -> . VAR assignlist
    (23) declaration -> . VAR declarationList
    (30) reassignment -> . ID EQ expression
    (31) reassignment -> . ID PLUSEQ expression
    (32) reassignment -> . ID MINUSEQ expression
    (33) reassignment -> . ID INTOEQ expression
    (34) reassignment -> . ID DIVEQ expression
    (35) reassignment -> . ID INCR
    (36) reassignment -> . ID DECR
    (37) reassignment -> . ID LSHIFTEQ expression
    (38) reassignment -> . ID RSHIFTEQ expression
    (39) reassignment -> . ID URSHIFTEQ expression
    (40) reassignment -> . ID ANDEQ expression
    (41) reassignment -> . ID OREQ expression
    (42) reassignment -> . ID XOREQ expression
    (43) reassignment -> . ID MODEQ expression
    (44) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (72) funcstmt -> . ID EQ functioncall
    (73) funcstmt -> . functioncall
    (74) funcstmt -> . VAR ID EQ functioncall
    (88) if -> . IF expression ifelseblock block ifblockend
    (90) ifelse -> . IF expression ifelseblock block ELSE elseblock block elseblockend
    (94) whileloop -> . WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend
    (116) funcdecl -> . FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc
    (119) funcdecl -> . VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl
    (98) forloop -> . FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker
    (76) reassignmentarray -> . arrayCall EQ expression
    (84) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (77) arrayCall -> . ID reference

    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 3
    CONSOLE         shift and go to state 17
    VAR             shift and go to state 21
    ID              shift and go to state 22
    LEFTPAREN       shift and go to state 19
    IF              shift and go to state 14
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 15
    FOR             shift and go to state 7

    statements                     shift and go to state 219
    if                             shift and go to state 4
    whileloop                      shift and go to state 5
    funcstmt                       shift and go to state 8
    arrayCall                      shift and go to state 9
    reassignmentarray              shift and go to state 11
    ifelse                         shift and go to state 12
    statement                      shift and go to state 13
    forloop                        shift and go to state 16
    assignment                     shift and go to state 18
    declaration                    shift and go to state 20
    funcdecl                       shift and go to state 24
    reassignment                   shift and go to state 6
    functioncall                   shift and go to state 27

state 206

    (113) funcargList -> ID COMMA funcargList .

    RIGHTPAREN      reduce using rule 113 (funcargList -> ID COMMA funcargList .)


state 207

    (20) statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .

    BREAK           reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)
    CONTINUE        reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)
    RETURN          reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)
    CONSOLE         reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)
    VAR             reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)
    ID              reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)
    LEFTPAREN       reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)
    IF              reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)
    WHILE           reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)
    FUNCTION        reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)
    FOR             reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)
    $end            reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)
    RIGHTBRACE      reduce using rule 20 (statement -> CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON .)


state 208

    (21) printList -> expression COMMA printList .

    RIGHTPAREN      reduce using rule 21 (printList -> expression COMMA printList .)


state 209

    (46) arrayList -> array COMMA arrayList .

    RIGHTBRACKET    reduce using rule 46 (arrayList -> array COMMA arrayList .)


state 210

    (48) arrayList -> expression COMMA arrayList .

    RIGHTBRACKET    reduce using rule 48 (arrayList -> expression COMMA arrayList .)


state 211

    (119) funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead . RIGHTPAREN funblock SEMICOLON endfuncdecl

    RIGHTPAREN      shift and go to state 220


state 212

    (94) whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .

    BREAK           reduce using rule 94 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)
    CONTINUE        reduce using rule 94 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)
    RETURN          reduce using rule 94 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)
    CONSOLE         reduce using rule 94 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)
    VAR             reduce using rule 94 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)
    ID              reduce using rule 94 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)
    LEFTPAREN       reduce using rule 94 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)
    IF              reduce using rule 94 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)
    WHILE           reduce using rule 94 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)
    FUNCTION        reduce using rule 94 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)
    FOR             reduce using rule 94 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)
    $end            reduce using rule 94 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)
    RIGHTBRACE      reduce using rule 94 (whileloop -> WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend .)


state 213

    (97) whileblockend -> empty .

    BREAK           reduce using rule 97 (whileblockend -> empty .)
    CONTINUE        reduce using rule 97 (whileblockend -> empty .)
    RETURN          reduce using rule 97 (whileblockend -> empty .)
    CONSOLE         reduce using rule 97 (whileblockend -> empty .)
    VAR             reduce using rule 97 (whileblockend -> empty .)
    ID              reduce using rule 97 (whileblockend -> empty .)
    LEFTPAREN       reduce using rule 97 (whileblockend -> empty .)
    IF              reduce using rule 97 (whileblockend -> empty .)
    WHILE           reduce using rule 97 (whileblockend -> empty .)
    FUNCTION        reduce using rule 97 (whileblockend -> empty .)
    FOR             reduce using rule 97 (whileblockend -> empty .)
    $end            reduce using rule 97 (whileblockend -> empty .)
    RIGHTBRACE      reduce using rule 97 (whileblockend -> empty .)


state 214

    (98) forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker . SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker

    SEMICOLON       shift and go to state 221


state 215

    (93) elseblockend -> empty .

    BREAK           reduce using rule 93 (elseblockend -> empty .)
    CONTINUE        reduce using rule 93 (elseblockend -> empty .)
    RETURN          reduce using rule 93 (elseblockend -> empty .)
    CONSOLE         reduce using rule 93 (elseblockend -> empty .)
    VAR             reduce using rule 93 (elseblockend -> empty .)
    ID              reduce using rule 93 (elseblockend -> empty .)
    LEFTPAREN       reduce using rule 93 (elseblockend -> empty .)
    IF              reduce using rule 93 (elseblockend -> empty .)
    WHILE           reduce using rule 93 (elseblockend -> empty .)
    FUNCTION        reduce using rule 93 (elseblockend -> empty .)
    FOR             reduce using rule 93 (elseblockend -> empty .)
    $end            reduce using rule 93 (elseblockend -> empty .)
    RIGHTBRACE      reduce using rule 93 (elseblockend -> empty .)


state 216

    (90) ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .

    BREAK           reduce using rule 90 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)
    CONTINUE        reduce using rule 90 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)
    RETURN          reduce using rule 90 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)
    CONSOLE         reduce using rule 90 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)
    VAR             reduce using rule 90 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)
    ID              reduce using rule 90 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)
    LEFTPAREN       reduce using rule 90 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)
    IF              reduce using rule 90 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)
    WHILE           reduce using rule 90 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)
    FUNCTION        reduce using rule 90 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)
    FOR             reduce using rule 90 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)
    RIGHTBRACE      reduce using rule 90 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)
    $end            reduce using rule 90 (ifelse -> IF expression ifelseblock block ELSE elseblock block elseblockend .)


state 217

    (116) funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .

    BREAK           reduce using rule 116 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)
    CONTINUE        reduce using rule 116 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)
    RETURN          reduce using rule 116 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)
    CONSOLE         reduce using rule 116 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)
    VAR             reduce using rule 116 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)
    ID              reduce using rule 116 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)
    LEFTPAREN       reduce using rule 116 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)
    IF              reduce using rule 116 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)
    WHILE           reduce using rule 116 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)
    FUNCTION        reduce using rule 116 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)
    FOR             reduce using rule 116 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)
    RIGHTBRACE      reduce using rule 116 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)
    $end            reduce using rule 116 (funcdecl -> FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc .)


state 218

    (118) endfunc -> empty .

    BREAK           reduce using rule 118 (endfunc -> empty .)
    CONTINUE        reduce using rule 118 (endfunc -> empty .)
    RETURN          reduce using rule 118 (endfunc -> empty .)
    CONSOLE         reduce using rule 118 (endfunc -> empty .)
    VAR             reduce using rule 118 (endfunc -> empty .)
    ID              reduce using rule 118 (endfunc -> empty .)
    LEFTPAREN       reduce using rule 118 (endfunc -> empty .)
    IF              reduce using rule 118 (endfunc -> empty .)
    WHILE           reduce using rule 118 (endfunc -> empty .)
    FUNCTION        reduce using rule 118 (endfunc -> empty .)
    FOR             reduce using rule 118 (endfunc -> empty .)
    $end            reduce using rule 118 (endfunc -> empty .)
    RIGHTBRACE      reduce using rule 118 (endfunc -> empty .)


state 219

    (120) funblock -> LEFTBRACE statements . RIGHTBRACE

    RIGHTBRACE      shift and go to state 222


state 220

    (119) funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN . funblock SEMICOLON endfuncdecl
    (120) funblock -> . LEFTBRACE statements RIGHTBRACE

    LEFTBRACE       shift and go to state 205

    funblock                       shift and go to state 223

state 221

    (98) forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON . increment increment_marker RIGHTPAREN forblock endblock_marker
    (110) increment -> . reassignment SEMICOLON increment
    (111) increment -> . reassignment
    (30) reassignment -> . ID EQ expression
    (31) reassignment -> . ID PLUSEQ expression
    (32) reassignment -> . ID MINUSEQ expression
    (33) reassignment -> . ID INTOEQ expression
    (34) reassignment -> . ID DIVEQ expression
    (35) reassignment -> . ID INCR
    (36) reassignment -> . ID DECR
    (37) reassignment -> . ID LSHIFTEQ expression
    (38) reassignment -> . ID RSHIFTEQ expression
    (39) reassignment -> . ID URSHIFTEQ expression
    (40) reassignment -> . ID ANDEQ expression
    (41) reassignment -> . ID OREQ expression
    (42) reassignment -> . ID XOREQ expression
    (43) reassignment -> . ID MODEQ expression
    (44) reassignment -> . LEFTPAREN reassignment RIGHTPAREN

    ID              shift and go to state 54
    LEFTPAREN       shift and go to state 19

    reassignment                   shift and go to state 225
    increment                      shift and go to state 224

state 222

    (120) funblock -> LEFTBRACE statements RIGHTBRACE .

    SEMICOLON       reduce using rule 120 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    BREAK           reduce using rule 120 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    CONTINUE        reduce using rule 120 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    RETURN          reduce using rule 120 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    CONSOLE         reduce using rule 120 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    VAR             reduce using rule 120 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    ID              reduce using rule 120 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    LEFTPAREN       reduce using rule 120 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    IF              reduce using rule 120 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    WHILE           reduce using rule 120 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    FUNCTION        reduce using rule 120 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    FOR             reduce using rule 120 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    $end            reduce using rule 120 (funblock -> LEFTBRACE statements RIGHTBRACE .)
    RIGHTBRACE      reduce using rule 120 (funblock -> LEFTBRACE statements RIGHTBRACE .)


state 223

    (119) funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock . SEMICOLON endfuncdecl

    SEMICOLON       shift and go to state 226


state 224

    (98) forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment . increment_marker RIGHTPAREN forblock endblock_marker
    (102) increment_marker -> .

    RIGHTPAREN      reduce using rule 102 (increment_marker -> .)

    increment_marker               shift and go to state 227

state 225

    (110) increment -> reassignment . SEMICOLON increment
    (111) increment -> reassignment .

    SEMICOLON       shift and go to state 228
    RIGHTPAREN      reduce using rule 111 (increment -> reassignment .)


state 226

    (119) funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON . endfuncdecl
    (122) endfuncdecl -> .

    BREAK           reduce using rule 122 (endfuncdecl -> .)
    CONTINUE        reduce using rule 122 (endfuncdecl -> .)
    RETURN          reduce using rule 122 (endfuncdecl -> .)
    CONSOLE         reduce using rule 122 (endfuncdecl -> .)
    VAR             reduce using rule 122 (endfuncdecl -> .)
    ID              reduce using rule 122 (endfuncdecl -> .)
    LEFTPAREN       reduce using rule 122 (endfuncdecl -> .)
    IF              reduce using rule 122 (endfuncdecl -> .)
    WHILE           reduce using rule 122 (endfuncdecl -> .)
    FUNCTION        reduce using rule 122 (endfuncdecl -> .)
    FOR             reduce using rule 122 (endfuncdecl -> .)
    $end            reduce using rule 122 (endfuncdecl -> .)
    RIGHTBRACE      reduce using rule 122 (endfuncdecl -> .)

    endfuncdecl                    shift and go to state 229

state 227

    (98) forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker . RIGHTPAREN forblock endblock_marker

    RIGHTPAREN      shift and go to state 230


state 228

    (110) increment -> reassignment SEMICOLON . increment
    (110) increment -> . reassignment SEMICOLON increment
    (111) increment -> . reassignment
    (30) reassignment -> . ID EQ expression
    (31) reassignment -> . ID PLUSEQ expression
    (32) reassignment -> . ID MINUSEQ expression
    (33) reassignment -> . ID INTOEQ expression
    (34) reassignment -> . ID DIVEQ expression
    (35) reassignment -> . ID INCR
    (36) reassignment -> . ID DECR
    (37) reassignment -> . ID LSHIFTEQ expression
    (38) reassignment -> . ID RSHIFTEQ expression
    (39) reassignment -> . ID URSHIFTEQ expression
    (40) reassignment -> . ID ANDEQ expression
    (41) reassignment -> . ID OREQ expression
    (42) reassignment -> . ID XOREQ expression
    (43) reassignment -> . ID MODEQ expression
    (44) reassignment -> . LEFTPAREN reassignment RIGHTPAREN

    ID              shift and go to state 54
    LEFTPAREN       shift and go to state 19

    reassignment                   shift and go to state 225
    increment                      shift and go to state 231

state 229

    (119) funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .

    BREAK           reduce using rule 119 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)
    CONTINUE        reduce using rule 119 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)
    RETURN          reduce using rule 119 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)
    CONSOLE         reduce using rule 119 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)
    VAR             reduce using rule 119 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)
    ID              reduce using rule 119 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)
    LEFTPAREN       reduce using rule 119 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)
    IF              reduce using rule 119 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)
    WHILE           reduce using rule 119 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)
    FUNCTION        reduce using rule 119 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)
    FOR             reduce using rule 119 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)
    RIGHTBRACE      reduce using rule 119 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)
    $end            reduce using rule 119 (funcdecl -> VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl .)


state 230

    (98) forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN . forblock endblock_marker
    (104) forblock -> . LEFTBRACE statements RIGHTBRACE

    LEFTBRACE       shift and go to state 232

    forblock                       shift and go to state 233

state 231

    (110) increment -> reassignment SEMICOLON increment .

    RIGHTPAREN      reduce using rule 110 (increment -> reassignment SEMICOLON increment .)


state 232

    (104) forblock -> LEFTBRACE . statements RIGHTBRACE
    (5) statements -> . statement statements
    (6) statements -> . statement
    (7) statement -> . assignment SEMICOLON
    (8) statement -> . declaration SEMICOLON
    (9) statement -> . reassignment SEMICOLON
    (10) statement -> . BREAK SEMICOLON
    (11) statement -> . CONTINUE SEMICOLON
    (12) statement -> . funcstmt SEMICOLON
    (13) statement -> . if
    (14) statement -> . ifelse
    (15) statement -> . whileloop
    (16) statement -> . funcdecl
    (17) statement -> . forloop
    (18) statement -> . reassignmentarray SEMICOLON
    (19) statement -> . RETURN expression SEMICOLON
    (20) statement -> . CONSOLE DOT LOG LEFTPAREN printList RIGHTPAREN SEMICOLON
    (26) assignment -> . VAR assignlist
    (23) declaration -> . VAR declarationList
    (30) reassignment -> . ID EQ expression
    (31) reassignment -> . ID PLUSEQ expression
    (32) reassignment -> . ID MINUSEQ expression
    (33) reassignment -> . ID INTOEQ expression
    (34) reassignment -> . ID DIVEQ expression
    (35) reassignment -> . ID INCR
    (36) reassignment -> . ID DECR
    (37) reassignment -> . ID LSHIFTEQ expression
    (38) reassignment -> . ID RSHIFTEQ expression
    (39) reassignment -> . ID URSHIFTEQ expression
    (40) reassignment -> . ID ANDEQ expression
    (41) reassignment -> . ID OREQ expression
    (42) reassignment -> . ID XOREQ expression
    (43) reassignment -> . ID MODEQ expression
    (44) reassignment -> . LEFTPAREN reassignment RIGHTPAREN
    (72) funcstmt -> . ID EQ functioncall
    (73) funcstmt -> . functioncall
    (74) funcstmt -> . VAR ID EQ functioncall
    (88) if -> . IF expression ifelseblock block ifblockend
    (90) ifelse -> . IF expression ifelseblock block ELSE elseblock block elseblockend
    (94) whileloop -> . WHILE whileblockstart LEFTPAREN expression RIGHTPAREN exprcheck block whileblockend
    (116) funcdecl -> . FUNCTION ID funcscopedefnormal LEFTPAREN funcarghead RIGHTPAREN funblock endfunc
    (119) funcdecl -> . VAR ID EQ FUNCTION funcscopedef LEFTPAREN funcarghead RIGHTPAREN funblock SEMICOLON endfuncdecl
    (98) forloop -> . FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker
    (76) reassignmentarray -> . arrayCall EQ expression
    (84) functioncall -> . ID LEFTPAREN argList RIGHTPAREN
    (77) arrayCall -> . ID reference

    BREAK           shift and go to state 25
    CONTINUE        shift and go to state 26
    RETURN          shift and go to state 3
    CONSOLE         shift and go to state 17
    VAR             shift and go to state 21
    ID              shift and go to state 22
    LEFTPAREN       shift and go to state 19
    IF              shift and go to state 14
    WHILE           shift and go to state 2
    FUNCTION        shift and go to state 15
    FOR             shift and go to state 7

    statements                     shift and go to state 234
    if                             shift and go to state 4
    whileloop                      shift and go to state 5
    funcstmt                       shift and go to state 8
    arrayCall                      shift and go to state 9
    reassignmentarray              shift and go to state 11
    ifelse                         shift and go to state 12
    statement                      shift and go to state 13
    forloop                        shift and go to state 16
    assignment                     shift and go to state 18
    declaration                    shift and go to state 20
    funcdecl                       shift and go to state 24
    reassignment                   shift and go to state 6
    functioncall                   shift and go to state 27

state 233

    (98) forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock . endblock_marker
    (103) endblock_marker -> .

    BREAK           reduce using rule 103 (endblock_marker -> .)
    CONTINUE        reduce using rule 103 (endblock_marker -> .)
    RETURN          reduce using rule 103 (endblock_marker -> .)
    CONSOLE         reduce using rule 103 (endblock_marker -> .)
    VAR             reduce using rule 103 (endblock_marker -> .)
    ID              reduce using rule 103 (endblock_marker -> .)
    LEFTPAREN       reduce using rule 103 (endblock_marker -> .)
    IF              reduce using rule 103 (endblock_marker -> .)
    WHILE           reduce using rule 103 (endblock_marker -> .)
    FUNCTION        reduce using rule 103 (endblock_marker -> .)
    FOR             reduce using rule 103 (endblock_marker -> .)
    $end            reduce using rule 103 (endblock_marker -> .)
    RIGHTBRACE      reduce using rule 103 (endblock_marker -> .)

    endblock_marker                shift and go to state 235

state 234

    (104) forblock -> LEFTBRACE statements . RIGHTBRACE

    RIGHTBRACE      shift and go to state 236


state 235

    (98) forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .

    BREAK           reduce using rule 98 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)
    CONTINUE        reduce using rule 98 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)
    RETURN          reduce using rule 98 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)
    CONSOLE         reduce using rule 98 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)
    VAR             reduce using rule 98 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)
    ID              reduce using rule 98 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)
    LEFTPAREN       reduce using rule 98 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)
    IF              reduce using rule 98 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)
    WHILE           reduce using rule 98 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)
    FUNCTION        reduce using rule 98 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)
    FOR             reduce using rule 98 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)
    RIGHTBRACE      reduce using rule 98 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)
    $end            reduce using rule 98 (forloop -> FOR scope_marker LEFTPAREN initialization SEMICOLON forexpr_marker for_expr forcheck_marker SEMICOLON increment increment_marker RIGHTPAREN forblock endblock_marker .)


state 236

    (104) forblock -> LEFTBRACE statements RIGHTBRACE .

    BREAK           reduce using rule 104 (forblock -> LEFTBRACE statements RIGHTBRACE .)
    CONTINUE        reduce using rule 104 (forblock -> LEFTBRACE statements RIGHTBRACE .)
    RETURN          reduce using rule 104 (forblock -> LEFTBRACE statements RIGHTBRACE .)
    CONSOLE         reduce using rule 104 (forblock -> LEFTBRACE statements RIGHTBRACE .)
    VAR             reduce using rule 104 (forblock -> LEFTBRACE statements RIGHTBRACE .)
    ID              reduce using rule 104 (forblock -> LEFTBRACE statements RIGHTBRACE .)
    LEFTPAREN       reduce using rule 104 (forblock -> LEFTBRACE statements RIGHTBRACE .)
    IF              reduce using rule 104 (forblock -> LEFTBRACE statements RIGHTBRACE .)
    WHILE           reduce using rule 104 (forblock -> LEFTBRACE statements RIGHTBRACE .)
    FUNCTION        reduce using rule 104 (forblock -> LEFTBRACE statements RIGHTBRACE .)
    FOR             reduce using rule 104 (forblock -> LEFTBRACE statements RIGHTBRACE .)
    $end            reduce using rule 104 (forblock -> LEFTBRACE statements RIGHTBRACE .)
    RIGHTBRACE      reduce using rule 104 (forblock -> LEFTBRACE statements RIGHTBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
WARNING: shift/reduce conflict for INTO in state 98 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 98 resolved as shift
WARNING: shift/reduce conflict for MOD in state 98 resolved as shift
WARNING: shift/reduce conflict for BINAND in state 98 resolved as shift
WARNING: shift/reduce conflict for BINOR in state 98 resolved as shift
WARNING: shift/reduce conflict for BINXOR in state 98 resolved as shift
WARNING: shift/reduce conflict for LT in state 98 resolved as shift
WARNING: shift/reduce conflict for GT in state 98 resolved as shift
WARNING: shift/reduce conflict for DOUBLEEQ in state 98 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for LTE in state 98 resolved as shift
WARNING: shift/reduce conflict for GTE in state 98 resolved as shift
WARNING: shift/reduce conflict for STREQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for STRNEQUAL in state 98 resolved as shift
